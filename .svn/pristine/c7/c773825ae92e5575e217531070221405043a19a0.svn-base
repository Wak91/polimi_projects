package View;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

import Controller.Controller;
import Model.Carta_azione;
import Model.Cavallo;
import Model.Giocatore;
import Model.Lavagna;
import Model.Scommessa;

public class Text_interface implements User_interface {
	
	
	HashMap<Integer, String> mappa_interi_colori; //necessaria per tradurre gli interi che leggo in stringhe colori

	
	public Text_interface()
	{
	init_mappa_interi_colori();	//inizializza hash da interi a colori
	System.out.println("-------BENVENUTO IN HORSE FEVER [VERSIONE TESTUALE]----------");		
	}
	
	/**
	 * funzione che inizializza hash map che trasforma gli interi che vengono acquisiti da console in colori dei cavalli  
	 */
	private void init_mappa_interi_colori() {
		mappa_interi_colori= new HashMap<Integer, String>();
		mappa_interi_colori.put(0, "nero");
		mappa_interi_colori.put(1, "blu");
		mappa_interi_colori.put(2, "verde");
		mappa_interi_colori.put(3, "rosso");
		mappa_interi_colori.put(4, "giallo");
		mappa_interi_colori.put(5, "bianco");		
	}
		
	/**
	 * Funzione per gestire input utente riceve un range bottom e top e controlla che l'input 
	 * sia compreso in esso message indica il messaggio che si vuole sia mostrato a schermo la prima volta
	 * ho deciso di usare interi che rendono il gioco piu immediato rispetto al digitare stringhe
	 * @param bottom  limite inferiore
	 * @param top		limite superiore
	 * @param message	messagio mostrato la prima volta
	 * @return	l'intero nel range inserito dall'utente
	 */
	public static int input_check(int bottom,int top,String message){
		boolean ok=false;
		int input=0;
		Scanner scanner;
		if (!message.equals("")){
			System.out.println(message);
		}
		while (!ok){
			scanner = new Scanner(System.in);
			try {
				 input = Integer.parseInt(scanner.nextLine());
				if (input<bottom || input>top) {
					System.out.println("Inserisci un numero da:"+bottom+" a "+top);
				}
				else {
					ok=true;
				}
			} catch (NumberFormatException e) {
				System.out.println("Inserisci un numero");
			}
		}
		return input;
	}
		
	/*
	public ArrayList <Carta_azione> get_carte_azione() {

		ArrayList <Carta_azione> ca_pescate = new ArrayList <Carta_azione>();
		Carta_azione card;
		System.out.println("Pesco 2 carte azione\n");
		card = (Carta_azione)Game.getMazzoAzione().pesca();
		ca_pescate.add(card);
		card = (Carta_azione)Game.getMazzoAzione().pesca();
		ca_pescate.add(card);
		return ca_pescate;
	}
*/
	
//----------------------------------------METODI INTERAZIONE SCOMMESSA---------------------------------------->
	public void show_action_card(Giocatore player) {
		System.out.println("Giocatore "+ player.get_nome() +" hai pescato: ");
		for (Carta_azione carta : player.get_action_cards()) {
			System.out.println(carta.get_string_card());
		}
	}
	
	public boolean make_seconda_scommessa(Giocatore player) {
		System.out.println(player.get_nome()+" vuoi fare una seconda scommessa?\n[0]Si\n[1]No");
		int risp = input_check(0, 1, "");
		if (risp==0)
			{ return true; }
		else 
			{ return false; }
		
	}
	
	private void show_interi_colori(){
		for (Integer key : mappa_interi_colori.keySet()) {
			System.out.println("["+key+"] "+mappa_interi_colori.get(key));
		}
	}
	

	public String get_cavallo_scommessa(String message) {
		
		
		System.out.println("\n-------GIRO DI SCOMMESSE----------");
		if (!message.equals("")){
			System.out.println(message);
		}
		System.out.println("Le Quotazioni attuali sono:");
		Lavagna.visualizzaLavagna();
		System.out.println("Inserisci il numero del cavallo su cui vuoi scommettere");
		show_interi_colori();
		int int_colore =input_check(0, 5, "");
		return mappa_interi_colori.get(int_colore);
	}
	
	public String get_cavallo_scommessa(){
		return get_cavallo_scommessa("");
	}
	
	public  int get_soldi_scommessa(Giocatore player) {
		boolean exit=false;
		int number_cash;	//numero banconote
		int type_cash;		//tipo banconote 50,100...
		int den=0;			//denaro scommesso
		while (!exit){	
			type_cash = input_check(0,4,"Ora hai:"+(player.get_money()-den)+" soldi "+"\nInserisci banconota da inserire:\n[0]50\n[1]100\n[2]1000\n[3]FINE\n[4]AZZERA SOLDI");
			switch (type_cash) {
			case 0:
				 number_cash= input_check(0, (player.get_money()-den)/50, "Inserisci quante banconote da 50 vuoi");
					 den+=number_cash*50;				
				break;
	
			case 1:
				number_cash= input_check(0, (player.get_money()-den)/100, "Inserisci quante banconote da 100 vuoi");
					 den+=number_cash*100;				
				break;
			case 2:
				number_cash= input_check(0, (player.get_money()-den)/1000, "Inserisci quante banconote da 1000 vuoi");
					den+=number_cash*1000;
					break;
			case 3:
				if(den>=player.get_min_bet())
				   { exit=true; }
				else {
					System.out.println("Devi Scommettere almeno "+player.get_min_bet());
				}
				break;
			case 4:
				den=0;
				System.out.println("Soldi scommessa azzerati");
				break;
				
			default:break;
			}	
			
		}		
		return den;	
	}
	/**
	 * gestisce il tipo di scommessa scelto utente
	 * @return ritorna alternativamente "Vincente" o "Piazzata" a seconda della scelta
	 */
	public String get_tipo_scommessa(String message) {
		if (!message.equals(""))	
			{ System.out.println(message); }
		int tipo = input_check(0, 1, "Inserisci tipo scommessa:\n[0]Vincente\n[1]Piazzata");
		String tipo_scommessa;
		if (tipo==0)
			{ tipo_scommessa="Vincente"; }
		else
			{ tipo_scommessa= "Piazzata"; }
		return tipo_scommessa;
	}
	
	public String get_tipo_scommessa() {
		return get_tipo_scommessa("");
	}
	
	public void show_all_bet(Giocatore player) {
		System.out.println("\n-------SCOMMESSE EFFETTUATE DA "+player.get_nome()+"----------\n");
		for (Scommessa scommessa : player.get_scommesse()) {
			System.out.println(scommessa.toString());
		}
	}
	
	public void game_over_player(Giocatore player){
		System.out.println("Mi dispiace "+player.get_nome()+" ma hai perso");
	}

	public void not_enough_money(String nome) {
		System.out.println(nome+"non hai abbastanza soldi per fare la seconda scommessa");
		wait_enter();
		
	}
//<------------------------------TRUCCARE CORSA---------------------------------------->
	
	/**
	 * restituisce la carta azione che il giocatore vuole giocare
	 */
	public int get_action_card_played(Giocatore player) {
		System.out.println("\n-------TRUCCARE LA CORSA----------");
		System.out.println(player.get_nome()+" hai queste carte azione:");
		
		int i= 0;
		StringBuffer message = new StringBuffer();
		message.append("Inserisci numero relativo a carta:");
		for (Carta_azione card : player.get_action_cards()) {	//mostro le carte come "[indice array] : nome" cosi sotto riesco a ricavare la carta dall'indice
			message.append("\n["+i+"]"+card.getNome());				//digitato dall'utente
			i++;
		}
		System.out.println(message);
		int index = input_check(0, 1, "");
		return index;
	
		
			
	
	}
	/**
	 * restituisce cavallo 
	 */
	public String get_horse_affected() {
		System.out.println("Su quale cavallo vuoi giocare questa carta?");
		show_interi_colori();
		int int_colore =input_check(0, 5, "");
		String color =  mappa_interi_colori.get(int_colore);
		
		return color;
		
	}
	public void show_action_horse(Cavallo horse) {
		System.out.println("\n-------SITUAZIONE CAVALLO " + horse.get_color() + "--------");
			System.out.println(horse.get_string_carte_azione());
	}
	

	
	public void show_corsa(ArrayList<Cavallo> cavalli_in_gioco,int lunghezza) {
		System.out.print("\n\n_________TABELLONE CORSA_________\n\n\n");
		for(Cavallo horse : cavalli_in_gioco)
		   {
			System.out.print(""+horse.get_color()+"  )\n");
			for(int i=1;i<=lunghezza-1;i++)
				{ System.out.print("- "); }
			System.out.print("F\n");
			
			if(horse.get_posizione()<=lunghezza)
			  {
			
			   for(int i=1;i<horse.get_posizione();i++)
			       { System.out.print("# "); }
			   System.out.print("X ");
			   
			   for(int i=horse.get_posizione()+1;i<=lunghezza;i++)
				   { System.out.print("# "); }
			   System.out.print("\n");
			   for(int i=1;i<=lunghezza-1;i++)
				   { System.out.print("- "); }
			   System.out.print("F ");
			  }
			else
				{				   
				for(int i=1;i<=lunghezza;i++)
					{ System.out.print("# ");  }
				
			    for(int i=lunghezza+1;i<horse.get_posizione();i++)
			    	{ System.out.print("# "); }
			    System.out.print("X");
			    }
			System.out.print("\n");
		   }
		}
	
	public void show_classifica(ArrayList<String> classifica) {
		int posizione=1;
		System.out.println("<--CLASSIFICA FINALE-->\n");
		for(String s : classifica)
		   {
			
			System.out.println("" + posizione +" )" + s);
			posizione++;
		   }
		
	}
	
	public void show_win_money(Giocatore player,int money,int pv) {
		System.out.println("Complimenti "+player.get_nome()+" hai vinto "+money+" soldi e "+pv+" pv");
	}
	
	public void show_lost_money(Giocatore player){
		System.out.println(""+player.get_nome() + "ci spiace, le tue scommesse non sono state vincenti");
	}
	
	public void show_win_scud(Giocatore player , int money)
	{
		System.out.println("" + player.get_nome() + " hai vinto "+ money+ "grazie alla " + player.get_scuderia());
	}
	
	public void show_bad_end_message(){
		System.out.println("Avete perso tutti\n");
	}
	
	public void show_winner(String vincitore){
		System.out.println("Il vincitore Ã¨: "+vincitore);
	}

	private static void wait_enter() {
		Scanner scanner = new Scanner(System.in);
		System.out.println("Schiaccia invio per continuare ");
		scanner.nextLine();
	}

	public int get_num_player() {
		int num,i;
		Scanner scanner = new Scanner(System.in);
		System.out.println("Quanti giocatori?\n");
		num=input_check(2, 6, "");
		return num;
	}

	public String get_player(int i) {

		Scanner scanner = new Scanner(System.in);
		System.out.println("Nome del giocatore \n");
    	return scanner.nextLine();
		
	}

	public ArrayList<Carta_azione> get_carte_azione() {
		// TODO Auto-generated method stub
		return null;
	}

	public void add_controller(Controller cont) {
		// TODO Auto-generated method stub
		
	}

	public void start() {
		// TODO Auto-generated method stub
		
	}



	


	


}

