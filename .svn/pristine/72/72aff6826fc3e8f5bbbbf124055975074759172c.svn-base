package it.polimi.ingegneriaDelSoftware2013.horseFever_lorenzo2.fontana_fabio1.gritti;

/**
 * mazzo contiene un array di 'Carta' , il costruttore riceve in ingresso il tipo di mazzo che
 * si vuole costruire ( Azione, Movimento , ... ) e il file di testo dove si trovano le carte per 
 * costruire il mazzo. 
 * 
 * Quando pesco una carta e la ripongo nel mazzo, ricordarsi di metterla per ultima.
 */

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.StringTokenizer;

public class Mazzo 

 {
	private static enum tipo {azione,movimento,personaggio}; // questo poi viene spostato in GAME, non ha senso qua
	
	private final ArrayList <Carta> deck;  // il reference ad un deck non cambia mai! 
	private int index; // indice che serve per capire dove sono arrivato a pescare , 0=inizio deck.size=fine
	private int size; // la grandezza del mazzo probabilmente potrebbe servirci 
	
	private static FileReader file = null;
	private static BufferedReader buffer = null;
	private static String s_param;
	private static StringTokenizer s_token;
	private static Carta card;
	
	public Mazzo()
	    {
		deck = new ArrayList <Carta>();
		this.index = 0;
		this.size = 0;
		}
	
	public void show_mazzo(){
		for (Carta card : deck) {
			
		card.visualizza();
			
		}
	}
	
	/**
	 * Questo metodo aggiunge una carta al mazzo che lo chiama ( serve perchè creiamo i mazzi in modo statico )
	 * @param card è la carta da aggiungere e deck e l'array list di carte del mazzo che chiama il metodo 
	 */
	public void addCard(Carta card)
	{
	this.deck.add(card);	
	}
	
	/**
	 * questo metodo serve per pescare una carta da un oggetto mazzo istanziato 
	 * @return
	 */
	public Carta pesca()
	{
	this.index++; // mi posiziono sulla nuova carta 
	return deck.get(index--);	 // e ritorno quella vecchia!
	}
	
	/**
	 * Mischia un istanza di mazzo
	 */
	public void mischia()
	{
	Collections.shuffle(this.deck); // metodo di collections che mischia il mazzo 
	}
	
	/**
	 * Crea un oggetto di tipo Mazzo_azione
	 * @param m è il reference al mazzo che diventerà un mazzo di tipo azione
	 * Questi metodi statici sono stati inseriti per evitare di creare un grande switch case nel costruttore di mazzo
	 */
	public static void Make_action_deck(Mazzo m)
	{
		try 
		   {	
			file = new FileReader("Carte_azione");
			buffer = new BufferedReader(file);
		   }
		catch (Exception e)
			{System.out.println(e);}
		
		try
		{
			s_param = buffer.readLine();
			while(s_param!= null)
			{
			s_token = new StringTokenizer(s_param,";");
			String par_1 = s_token.nextToken();
			String par_2 = s_token.nextToken();   //prelevo parametri necessari dal file
			String par_3 = s_token.nextToken();
			card = new Carta_azione(par_1,par_2.charAt(0),par_3.charAt(0));  //creo la carta
			m.addCard(card);  // la aggiungo al mazzo
			m.size++;
			s_param = buffer.readLine();  // passo alla prossima riga
			}
		}
		catch (Exception e)
		{
			System.out.println(e);	
		}
		m.mischia(); // diamo una mischiata al mazzo corrente 
		try {file.close();} //chiudo il file in ogni caso quando sono uscito dallo switch 
		catch (IOException e) 
		   {System.out.println("Errore nella chiusura del file\n");}
  }
	

	public static void Make_charatcher_deck(Mazzo m)
	{
		try 
		   {	
			file = new FileReader("Carte_personaggio");
			buffer = new BufferedReader(file);
		   }
		catch (Exception e)
			{System.out.println(e);}
		
		try
		{
			s_param = buffer.readLine();
			while(s_param!= null)
			{
			  s_token = new StringTokenizer(s_param,";");
          	  String par_1 = s_token.nextToken();
          	  Integer par_2 = Integer.parseInt(s_token.nextToken());
          	  String par_3 = s_token.nextToken();
          	  card = new Carta_personaggio(par_1,par_2,par_3);
          	  m.addCard(card);
          	  m.size++; // conto il numero di carte presenti in questo mazzo
          	  s_param = buffer.readLine();
			}
		}
		catch (Exception e)
		{
			System.out.println(e);	
		}
		m.mischia(); // diamo una mischiata al mazzo corrente 	
		try {file.close();} //chiudo il file in ogni caso quando sono uscito dallo switch 
		catch (IOException e) 
		   {System.out.println("Errore nella chiusura del file\n");}
  }
	
	
	//------MAIN PER TESTING--------
	
	public static void main(String[] args) 
	
	{
	System.out.println("Mazzo di carte azione");
	Mazzo m_action = new Mazzo();
	Mazzo.Make_action_deck(m_action);
	m_action.show_mazzo();
	
	System.out.println("Mazzo di carte personaggio");
	Mazzo m_chara = new Mazzo(); 
	Mazzo.Make_charatcher_deck(m_chara);
	m_chara.show_mazzo();
	}
	
	//------MAIN PER TESTING--------

}
