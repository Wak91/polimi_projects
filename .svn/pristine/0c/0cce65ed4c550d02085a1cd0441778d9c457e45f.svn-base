package Controller;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Currency;
import java.util.HashMap;

import javax.swing.JOptionPane;

import Controller_events.EventoCorsa;
import Controller_events.HorseFeverEventController;
import Controller_events.TruccaEvent;
import Controller_events.askIfSecondaScommessa;
import Controller_events.askScommessaEvent;
import Controller_events.getMovimentoEvent;
import Controller_events.getNomePlayerEvent;
import Controller_events.getNumPlayerEvent;
import Controller_events.showClassificaEvent;
import Controller_events.showPriceEvent;
import Controller_events.showRimossiEvent;
import Controller_events.showWinnerEvent;
import Gui_Events.GoRaceEvent;
import Gui_Events.TruccaCavallo;
import Gui_Events.AnswerSecondaScommessaEvent;
import Gui_Events.letsPayEvent;
import Gui_Events.setNomeEvent;
import Gui_Events.setNumPlayerEvent;
import Gui_Events.setScommessaEvent;
import Gui_Events.sistemaEvent;
import Gui_Events.sistemaEventUI;
import Model.Carta_azione;
import Model.Carta_movimento;
import Model.Carta_personaggio;
import Model.Cavallo;
import Model.Game;
import Model.Giocatore;
import Model.Lavagna;
import Model.Model_interface;
import Model.Scommessa;
import View.GUI_interface;
import View.Text_interface;
import View.User_interface;


public class Controller implements Controller_Interface {

	private Model_interface model;
	private User_interface Ui;
	
	private int num_giocatori;

	public Controller(User_interface UserIface,Model_interface model_interface){
		Ui=UserIface;
		model=model_interface;
	}
	
	/**
	 * crea evento e sollecita la view a richiedere numero giocatori
	 */
	public void get_player_number() {
		getNumPlayerEvent event =new getNumPlayerEvent(this);
		Ui.get_num_player(event);
	}
	
	/**
	 * riceve dall'evento il numero giocatori e chiama la Ui per acquisire nome giocatore decrementando variabile num giocartori
	 */
	public void  how_many_player(setNumPlayerEvent evt) {
		num_giocatori=evt.getNum_player();
		num_giocatori--;
		getNomePlayerEvent event = new getNomePlayerEvent(this);
		Ui.get_nome_player(event);
		
		
		
		}
	/**
	 * riceve nome giocatore e ne crea uno nel modello se il num giocatori e > di 0 altrimenti lancia ui per acquisire scommese
	 */
	public void create_player(setNomeEvent evt) {
		model.create_player(evt.getName());
		num_giocatori--;
		if (num_giocatori>=0){
			getNomePlayerEvent event = new getNomePlayerEvent(this);
			Ui.get_nome_player(event);
		}
		else {
			model.init_turni(); // istanzio qua i tuni perche' dipendono dal numero di giocatori iniziali dopo che li ho creati tutti
			deal_action_card();
		}
	}
	
	/*
	 * metodo per distribuire carte azione e iniziare scommessa
	 */
	private void deal_action_card() {
		model.set_primo_giocatore("orario");
		Giocatore giocatore=model.get_giocatore_corrente();
		do {
			System.out.println("carte a "+giocatore.get_nome());

			model.add_card_player(giocatore);
			model.next_giocatore("orario");
			giocatore=model.get_giocatore_corrente();
		} while (giocatore!=model.get_primo_giocatore("orario"));
	
		model.set_primo_giocatore("orario");
		start_scommessa() ;
	}
	
	public void start_scommessa() {
	      boolean ok=true;//variabile necessaria per impedire che alla fine il gioco richieda le scommesse come side effect delle chiamate a funzione
		model.init_num_gioc_turno();
		model.init_segnalini();  //istanzio qua i segnalini perche' decrescono col diminuire dei giocatori ( ?? )
		Giocatore giocatore=model.get_primo_giocatore("orario");
		//model.add_card_player(giocatore);
		while (model.get_giocatore_corrente().get_money()<model.get_giocatore_corrente().get_min_bet()){//vado avanti fino a quando non trovo giocatore che puo scommettere
			if(model.get_giocatore_corrente()==model.get_primo_giocatore("orario")){
				Giocatore player1 = model.get_primo_giocatore("orario");
			       trucca_gara(player1);
			       ok=false;
			       break;
			}
			else {
				model.next_giocatore("orario");
			}
		}
		if (ok) {
		askScommessaEvent evento=new askScommessaEvent(this,giocatore,false,false,false,model.getDisp_scuderia());// askscommessaevent prende giocatore,(booleano) errore cavallo,(booleano)errore tipo e (booleano)se 
		Ui.get_scommessa(evento);	
		}//quindi tutto  a false ora
	}
	/**
	 * Riceve setscommessaevent() controlla la validita scommessa e poi la piazza chiama 
	 * ui.get_scommessa per i player successivi e una volta finito chiama truccare corsa
	 * 
	 */
	public void  create_bet(setScommessaEvent evt){
		boolean ok=true;
		boolean err_cav=false;
		boolean err_tipo=false;
		
		Giocatore player = model.get_giocatore_corrente();
		if (model.check_disp_scuderia(evt.getCavallo())==false) {//setto le variabili che avviseranno la ui di errori
			System.out.println("cavallo non corretto");
			 err_cav=true;
		}
		if (model.check_tipo_scommessa(model.get_giocatore_corrente(), evt.getTipo(), evt.getCavallo())==false) {//setto le variabili che avviseranno la ui di errori
			 err_tipo = true;
		}
		if (err_cav==false&&err_tipo==false) {//non ci sono stati errori piazzo scommessa e vado avanti
			model.piazza_scommessa(player, evt.getMoney(), evt.getTipo(), evt.getCavallo());
			model.next_giocatore("orario");
			while (model.get_giocatore_corrente().get_money()<model.get_giocatore_corrente().get_min_bet()){//mi sposto su un giocatore che puo scommettere
				if(model.get_giocatore_corrente()==model.get_primo_giocatore("orario")){
					Giocatore player1 = model.get_primo_giocatore("orario");
				       trucca_gara(player1);
				       ok=false;
				       break;
				}
				else {
					model.next_giocatore("orario");
				}
			}
			if(ok){
				if(model.get_giocatore_corrente()!=model.get_primo_giocatore("orario")){
				//	model.add_card_player(model.get_giocatore_corrente());
					askScommessaEvent evento=new askScommessaEvent(this,model.get_giocatore_corrente(),false,false,false,model.getDisp_scuderia());
					Ui.get_scommessa(evento);
				}
				else { Giocatore player1 = model.get_primo_giocatore("orario");
				       trucca_gara(player1);
				     }
			}
		}
		else {
			askScommessaEvent evento=new askScommessaEvent(this,model.get_giocatore_corrente(),err_cav,err_tipo,false,model.getDisp_scuderia());
			Ui.get_scommessa(evento);

		}	
	}
	public void start_seconda_scommessa() {
		model.set_gioc_turno();
		model.set_primo_giocatore("antiorario");
		Giocatore giocatore= model.get_giocatore_corrente();
		check_player_money(giocatore);
		
	}
	public void ask_second_bet(AnswerSecondaScommessaEvent inEvent) {
		Giocatore giocatore=model.get_giocatore_corrente();
		if (inEvent.isOk_answer()){
			System.out.println("is ok controller");
			askScommessaEvent evento=new askScommessaEvent(this,giocatore,false,false,true,model.getDisp_scuderia());// askscommessaevent prende giocatore,(booleano) errore cavallo,(booleano)errore tipo e (booleano)se 
			Ui.get_scommessa(evento);
		}
		else {
			if(model.has_next_gioc_turno()){
				model.next_giocatore("antiorario");
				giocatore=model.get_giocatore_corrente();
				check_player_money(giocatore);

			}
			else {
				gara();

			}
		}
	}
	private void check_player_money(Giocatore giocatore) {
		if (giocatore.get_money()>giocatore.get_min_bet()) {
			askIfSecondaScommessa evento=new askIfSecondaScommessa(this, true,giocatore);// askscommessaevent prende giocatore,(booleano) errore cavallo,(booleano)errore tipo e (booleano)se e seconda scommessa
			Ui.ask_if_seconda_scommessa(evento);
		}
		else {
			askIfSecondaScommessa evento=new askIfSecondaScommessa(this, false,giocatore);
			Ui.ask_if_seconda_scommessa(evento);

		}
		
	}
	
	public void trucca_gara(Giocatore player)
	{
		TruccaEvent event = new TruccaEvent(this, player);
		Ui.show_panel_trucca(event);
	}
	
	public void tarocca_cavallo(TruccaCavallo event)
	{
		String colore = event.getColore();
		System.out.print("colore del cavallo da truccare " + colore + "con questa carta " + event.getCarta().getNome());
		Carta_azione carta_giocata = event.getCarta();
		Cavallo horse = model.horse_from_color(colore);
		model.add_card_horse(horse, carta_giocata);
		Giocatore player = model.next_giocatore("orario");
		if(player!= model.get_primo_giocatore("orario")) //confronto reference
		  { trucca_gara(player);}
		else
		  {
			start_seconda_scommessa();
		  }
		  
	}
	
	
	public void  create_second_bet(setScommessaEvent evt){
		boolean err_cav=false;
		boolean err_tipo=false;
		
		Giocatore player = model.get_giocatore_corrente();
		System.out.println("color"+evt.getCavallo()+" money"+evt.getMoney()+"tipo "+evt.getTipo());
		if (model.check_disp_scuderia(evt.getCavallo())==false) {
			System.out.println("cavallo non corretto");
			 err_cav=true;
		}
		if (model.check_tipo_scommessa(model.get_giocatore_corrente(), evt.getTipo(), evt.getCavallo())==false) {
			System.out.println("tipo non corretto");
			 err_tipo = true;
		}
		if (err_cav==false&&err_tipo==false) {
			model.piazza_scommessa(player, evt.getMoney(), evt.getTipo(), evt.getCavallo());
			if(model.has_next_gioc_turno()){
				model.next_giocatore("antiorario");
				player= model.get_giocatore_corrente();
				check_player_money(player);
			}
			else {
				gara();
			}
		}
		else {
			askScommessaEvent evento=new askScommessaEvent(this,model.get_giocatore_corrente(),err_cav,err_tipo,true,model.getDisp_scuderia());
			Ui.get_scommessa(evento);
		}	
	}
	
	
	public void gara()
	{
	 EventoCorsa eventcorsa = new EventoCorsa(this, model.get_cavalli(),model.getLunghezzaPercorso(),model.getCartaMovimento(),model.getFaseCorsa(),model.get_giocatori(),model.getColore1(),model.getColore2());
	 if(model.getFaseCorsa()==0)
	   {
		model.pre_check_partenza();
	   }
	 Ui.show_corsa( eventcorsa );
	}
	
	public void Gonext(GoRaceEvent gre){
		
		if(model.getFaseCorsa() == 0)
		  {
			model.partenza();
			gara();
		  }
		else if(model.getFaseCorsa() == 1)
		      {
			  model.running();
			  gara();
	          }
		else if(model.getFaseCorsa() == 2)
		  {
			model.sprinting();
			gara();
	      }
		else if(model.getFaseCorsa() == 3)
		  {
			boolean continuo = model.check_traguardo();
			if(continuo == true )
			   {gara();}

			else 
			  { showClassificaEvent classificaEvent = new showClassificaEvent(this, model.getClassifica());
				Ui.show_classifica(classificaEvent);  }
	      }
	}
		
	public void pay(letsPayEvent inEvent) {
		HashMap<Giocatore, ArrayList<Integer>> returned_price =model.pay_price();
		showPriceEvent outEvent = new showPriceEvent(this, returned_price);
		Ui.show_win_price(outEvent);	
	}
	
	public void sistema(sistemaEvent inEvent) {
		ArrayList<Giocatore> rimossi=model.sistema_giocatori();
		Ui.show_rimossi(new showRimossiEvent(this, rimossi));
	}
	
	public void sistema_partita(sistemaEventUI inEvent) {
		
		boolean finish =model.sistema_gioco();
		if (finish==true){
			if (model.get_giocatori().isEmpty()){
				Ui.show_bad_end_message();
			}
			else {
				Ui.show_winner(new showWinnerEvent(this, model.get_giocatori().get(0).get_nome()));
			}
		}
		else {
			deal_action_card();
		}
	}
	/*
	
	public void make_player(){
		int i;
		int num_g = Ui.get_num_player();
		System.out.println( "numero di giocatori " + num_g);
		for(i=0;i<num_g;i++)
		{
			String nome = Ui.get_player(i);
			System.out.println(nome);
		    Carta_personaggio card = model.create_player(nome);
		    Ui.show_carta_personaggio(nome,card);
		}
		model.init_segnalini();
		
		}*/
	/*
	public  void primo_giro_scommesse() {
		String colore_scommessa;
		int importo_scommessa;
		String tipo_scommessa;
		ArrayList<Giocatore> players = model.get_giocatori(); 
		for(Giocatore player : players)
		   {
			model.add_card_player(player);
			Ui.show_action_card(player);
			colore_scommessa = Ui.get_cavallo_scommessa();			//prendo il colore scommessa
			while ( model.check_disp_scuderia(colore_scommessa)==false)	{		//controllo se segnali sul cavallo sono sufficienti
				colore_scommessa = Ui.get_cavallo_scommessa("SEGNALINI CAVALLO ESAURITI SCOMMETTI SU UN ALTRO COLORE");
				}
			importo_scommessa = Ui.get_soldi_scommessa(player);	//prendo soldi
			tipo_scommessa =Ui.get_tipo_scommessa();//prendo il tipo e controllo regola piazzato vincente

			while (!model.check_tipo_scommessa(player, tipo_scommessa, colore_scommessa))
			{
				tipo_scommessa =Ui.get_tipo_scommessa("HAI GIA FATTO UNA SCOMMESSA COSI SE HAI SCELTO PIAZZATO ORA SCEGLI VINCENTE E VICEVERSA");
			}

			model.piazza_scommessa(player, importo_scommessa, tipo_scommessa, colore_scommessa);
		   }
		for (Giocatore player : players) {

			Ui.show_all_bet(player);	
		}

	}
	
	/**

	 * Fa' scegliere la carta azione ad un giocatore e il cavallo su cui giocarla
	 * richiamando poi il metodo add_card_horse
	 */
	/*
	public  void truccare_gara() {
		for (Giocatore player : model.get_giocatori()) {
			int card_choose = Ui.get_action_card_played(player);
			Carta_azione card = model.card_at_index(card_choose, player);
			String color = Ui.get_horse_affected();
			Cavallo horse = model.horse_from_color(color);
			
			model.add_card_horse(horse, card);
			
			
			}
		for (Cavallo horse : model.get_cavalli()) {
			Ui.show_action_horse(horse);
		}
					
	}	
	
	/**
	 * Effettua il secondo giro di scommesse facoltative per ogni giocatore
	 * facendo prima il check se c'e' disponibilita' di denari
	 */
/*
	public  void secondo_giro_scommesse() {
		String colore_scommessa;
		int importo_scommessa;
		String tipo_scommessa;
		boolean seconda_scommessa = false;
		ArrayList<Giocatore> players = model.get_giocatori(); 
		
		Collections.reverse(players); //deve scommettere a partire dall'ultimo
		for (Giocatore player : players) {	
			if (player.get_money()>player.get_min_bet())			// controllo se ha abbastanza soldi per la seconda scommessa e se vuole farla
				{ seconda_scommessa=Ui.make_seconda_scommessa(player); }
			else {
				Ui.not_enough_money(player.get_nome());
				seconda_scommessa=false;
			}
			if (seconda_scommessa==true){	
				colore_scommessa = Ui.get_cavallo_scommessa();			//prendo il colore scommessa
				while (model.check_disp_scuderia(colore_scommessa)==false){			//controllo se segnali sul cavallo sono sufficienti
					colore_scommessa = Ui.get_cavallo_scommessa("SEGNALINI CAVALLO ESAURITI SCOMMETTI SU UN ALTRO COLORE");
				}
				model.sub_segnalino_color(colore_scommessa);
				
				importo_scommessa = Ui.get_soldi_scommessa(player);	//prendo soldi
				
				tipo_scommessa =Ui.get_tipo_scommessa();
				while (model.check_tipo_scommessa(player, tipo_scommessa, colore_scommessa)==false){
					tipo_scommessa =Ui.get_tipo_scommessa("HAI GIA FATTO UNA SCOMMESSA COSI SE HAI SCELTO PIAZZATO ORA SCEGLI VINCENTE E VICEVERSA");
				}
				
				model.piazza_scommessa(player, importo_scommessa, tipo_scommessa , colore_scommessa);
			}
			
		}
		for(Giocatore player : players)
		   { Ui.show_all_bet(player); }		

			
	}
	
	
	/*
	 model.partenza();
	 Ui.show_corsa(model.get_cavalli(), model.getLunghezzaPercorso());
	// do
	// {
      run = model.running();	
      Ui.show_corsa(model.get_cavalli(), model.getLunghezzaPercorso());  // per far vedere anche la classifica per ogni cavallo che passa il traguardo posso passare anche la classifica qua
	 //}while(run==true);
	 Ui.show_classifica(model.getClassifica());
	 Lavagna.updateLavagna(model.getClassifica());
	}
	
	*/


	/*
	
	public boolean sistema(){
		
		for(Giocatore player : model.get_giocatori())
		   {
			model.sistema_giocatori(player);
		   }
		boolean check = model.sistema_gioco();
		if(check == true && model.get_giocatori().size()==0)
		  {
			Ui.show_bad_end_message();
			return false;
		  }
		else
			if(check == true)
			  {
				Ui.show_winner(model.get_giocatori().get(0).get_nome());
				return false;
			  }
		return true;	    
	}



	*/

}
