package it.polimi.ingegneriaDelSoftware2013.horseFever_lorenzo2.fontana_fabio1.gritti;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;

public class Giocatore implements Comparable <Giocatore>{
	
	private final String name;
	private int money ;
	private int pv;
	private static final int MIN_BET_MULT=100; //visin non vuole
	private String scuderia;


	
	private  Carta_personaggio character_card;  //volevo farla final ma per fare cio avrei dovuto aggiungerla nel costruttore cosa che abbiamo deciso di no
	private ArrayList<Carta_azione> action_cards;
		 
	private ArrayList <Scommessa> bet_list; 
	
	/**
	 * costruttore crea un oggetto personaggio settando pv a 1 e min_bet a 100
	 * @param nome
	 * @param carta_personaggio
	 */
	public Giocatore(String nome , Carta_personaggio cp) {
		this.name = nome;
		this.pv=1;
		this.action_cards = new ArrayList<Carta_azione>();
		this.bet_list= new ArrayList<Scommessa>();
		this.character_card = cp;
		this.scuderia = cp.get_scuderia();
		this.money = cp.get_soldi();
	}

//<----------------------------------------------GETTER------------------------------------------------------>
	
	public String get_nome()
	{
		return this.name;
	}
	
	public int get_money() {
		return this.money;		
	}
	
	public int  get_pv() {
		return this.pv;		
	}
	
	public int get_min_bet() {
		return this.MIN_BET_MULT*pv;		
	}
	
	public String get_scuderia() {
		return this.scuderia;
	}
	
	public Carta_personaggio get_character_card(){
		return this.character_card;
	}
	
	/**
	 * ritorna le carte azione di cui il giocatore dispone sotto forma di arraylist
	 * @return
	 */
	public ArrayList<Carta_azione> get_action_cards(){
		ArrayList<Carta_azione> carte_azione = new ArrayList<Carta_azione>();
		for (Carta_azione carta_azione : action_cards) {
			carte_azione.add(carta_azione);			
		}
		return carte_azione;
	}
	
	/**
	 * Ritorna scommesse del giocatore creando nuovo oggetto Arralist Scommessa quindi non esponendo il rep
	 * @return 
	 */
	public ArrayList <Scommessa> get_scommesse(){
		ArrayList<Scommessa> scommesse =new ArrayList<Scommessa>();
		for (Scommessa bet : bet_list) {
			scommesse.add(bet);		//non necessario clonare bet perche scommessa e immutabile
			
		}
		return scommesse; // come dicevamo occhio al rep.
	}
	
//<----------------------------------------------SETTER------------------------------------------------------>	
	/**
	 * dato un array di scommesse in ingresso le imposta come scommesse del giocatore 
	 * @param scom
	 */
	public void set_scommesse(ArrayList<Scommessa> scom)
	{
		this.bet_list = scom;
	}
	
	public void set_action_card(ArrayList <Carta_azione> ca)
	{
		this.action_cards = ca;
	}
	
	
//<----------------------------------------------GESTIONE PUNTI VITTTORIA------------------------------------------------------>
	
	
	
	/**
	 * sottrae pv al giocatore e aggiorna scommessa minima se rimangono 0 pv viene lanciata eccezione (giocatore da eliminare dal gioco)
	 * @param pv
	 * @return ritorna false se giocatore non ha abbastanza pv e true se ne ha
	 */
	public boolean sub_pv (int pv) {
		this.pv=this.pv-pv;
		if(this.pv<=0){
			return false;
		}	
		return true;
	}
	
	/**
	 * aggiunge pv al giocatore separata da sottrai solo per chiarezza e aggiorna la scommessa minima che dipende da essi
	 * @param pv
	 */
	public void add_pv(int pv) {
		this.pv=this.pv+pv;
	}
	
	
//<----------------------------------------------GESTIONE CARTE------------------------------------------------------>
	
	public void add_character_card(Carta_personaggio card){
		this.money=card.get_soldi();
		this.scuderia=card.get_scuderia();
		this.character_card=card;
	}
	
	public void drop_card()
	{
		this.action_cards.clear();
		
	}
	
	public void drop_scommesse() {
		bet_list.clear();
	}
	
	/**
	 * giocaotre gioca carta su un cavallo => tolgo carta da giocatore e aggiungo a cavallo !!!IMP IO PASSO A CAVALLO LA CARTA SE è IMMUTABILE NON C'è PROBLEMA ALTRIMENTI...PARLARE CON FABIO
	 * @param carta
	 * @param horse
	 * @throws IllegalArgumentException quando il giocatore cerca di giocare una carta che non ha
	 */
	public void play_action_card(Carta_azione carta,Cavallo horse){
		for (Carta_azione card : action_cards) {
			if (card.getNome()==carta.getNome()) {
				horse.add_carta_azione(carta);
				action_cards.remove(card);
				return;
			}
			
		}
		throw new IllegalArgumentException();
	}
	
	public void add_action_card(Carta_azione carta){
		action_cards.add(carta);		
	}	
	
	public Carta_azione  get_card_at_index(int i) {
		return action_cards.get(i);
	}
	
	public void show_action_cards() {
		if (action_cards.isEmpty()){
			System.out.println("Non ci sono carte azione associate al giocatore");
		}
		else{
			for (Carta_azione card : action_cards) {
					card.visualizza();
			}
		}
	}
	
//<----------------------------------------------GESTIONE SCOMMESSA------------------------------------------------------>
	

	
	/**
	 * Aggiunge una scommessa al giocatore
	 * @param denaro  denaro della scommessa deve essere maggiore di scommessa min del giocatore altrimenti eccezione viene sollevata
	 * @param colore	colore cavallo su cui scommette
	 * @param tipo		 scommessa Vincente o Piazzata
	 * @throws IllegalArgumentException
	 */	
	public void Scommette(int denaro,String colore,String tipo) throws IllegalArgumentException{
		if (denaro<MIN_BET_MULT*pv) 
			throw new IllegalArgumentException("Denaro deve essere maggiore della scommessa minima");
		else if (denaro>this.money) {
			throw new IllegalArgumentException("Non hai abbastanza soldi per questa scommessa"); 
		}
		else { 
			Scommessa bet = new Scommessa(denaro, colore, tipo);					//eseguito nella prima scommessa per creare array scommesse
			bet_list.add(bet);
			this.money=this.money-denaro;
		}
		
	}
	
	/**
	 * Scrive a schermo le scommesse
	 * 
	 */
	public void show_scommesse() {
		System.out.println("<---- Scommessa "+this.get_nome()+"---->");
		if (this.bet_list.isEmpty()) {
			System.out.println("\nNon sono state effettuate scommesse");
			
		}
		else {			
			for (Scommessa scommessa : this.bet_list) {
				scommessa.show_scommessa();
			}
		}
		
	}

//<----------------------------------------------METODI GENERALI------------------------------------------------------>

	public void set_money(int denaro) {
		this.money=denaro;
		
	}
	
	public void set_scuderia(String color)
	{
		this.scuderia = color;
	}
/*	
	public String toString() {
		String giocatore;
		giocatore="<---------------->\n";
		giocatore += "Nome:"+this.name+"\nDenaro: "+this.money+"\nPV: "+this.pv+"\nScommessa min: "+this.get_min_bet()+"\nScuderia: "+this.scuderia + "\nPersonaggio : " +this.character_card.getNome();
		giocatore+="\nCARTA GIOCATORE"+this.character_card.toString();
		giocatore+="\nSCOMMESSE:";
		if (bet_list!=null) {	
			giocatore+=("\nScommessa");
			for (Scommessa scommessa : bet_list) {
				giocatore+=scommessa.toString();		
			}
		}
		giocatore+="\nCARTE AZIONE:";
		giocatore+="\nCarta";
		if (action_cards!=null){
			for (Carta_azione card : action_cards) {
				giocatore+=card.toString();
			}
		}
		giocatore+="\n<---------------->";

		return giocatore;
	}
*/	
	
	/**SISTEMARE BUG Inserisci numero da 0 a 0 quando hai finito i soldi
	 * Questo metodo gestisce l'input del denaro della scommessa senza modificare nessun attributo di giocatore
	 * @param player serve per sapere il suo denaro e la scommessa minima;
	 * @return ritorna i soldi scommessi controllando che siano superiori alla scommessa minima e inferiori ai soldi totali
	 */
	public static int handle_cash_text_mode(Giocatore player) {
		boolean exit=false;
		int number_cash;	//numero banconote
		int type_cash;		//tipo banconote 50,100...
		int den=0;			//denaro scommesso
		while (!exit){	
			type_cash = Text_interface.input_check(0,3,"Ora hai:"+(player.get_money()-den)+"€"+"\nInserisci banconota da inserire:\n[0]50\n[1]100\n[2]1000\n[3]FINE");
			switch (type_cash) {
			case 0:
				 number_cash=Text_interface.input_check(0, (player.get_money()-den)/50, "Inserisci quante banconote da 50 vuoi");
					 den+=number_cash*50;				
				break;
	
			case 1:
				number_cash=Text_interface.input_check(0, (player.get_money()-den)/100, "Inserisci quante banconote da 100 vuoi");
					 den+=number_cash*100;				
				break;
			case 2:
				number_cash=Text_interface.input_check(0, (player.get_money()-den)/1000, "Inserisci quante banconote da 1000 vuoi");
					den+=number_cash*1000;
					break;
			case 3:
				if(den>=player.get_min_bet())
				exit=true;
				else {
					System.out.println("Devi Scommettere almeno "+player.get_min_bet());
				}
			}
			
		}
		
		return den;
		
	}

	public int compareTo(Giocatore player) {
		if (this.get_pv()>player.get_pv()){
			return -1;
		}
		if (this.get_pv()<player.get_pv()){
			return 1;
		}
		if (this.get_pv()==player.get_pv()){
			if (this.get_money()>player.get_money())
				return -1;
			if (this.get_money()<player.get_money())
				return 1;			
		}
		return 1;
		
	}
}