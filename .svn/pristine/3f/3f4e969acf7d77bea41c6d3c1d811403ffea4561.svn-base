
package Model;

import java.util.ArrayList;

/**
 * Classe cavallo gestisce posizione e carte associate alla pedina
 * @author Lorenzo
 * @param <Cavallo> serve per dire che il compareTo va fatto su un oggetto Cavallo
 *
 */
public class Cavallo implements Comparable <Cavallo> {
	private int posizione;
	private ArrayList<Carta_azione> carte_azione;
	private ArrayList<Carta_azione> carte_eliminate;
	private String colore;
	private int in_game;
	
	/**
	 * Costruttore del cavallo
	 * setto posizione iniziale alla prima casella della gara
	 * e dichiaro che il cavallo e' in gioco 
	 */
	public Cavallo(String color) {
		this.posizione=1;
		carte_azione=new ArrayList<Carta_azione>();
		this.colore = color;
		this.in_game=1;
		carte_eliminate = new ArrayList<Carta_azione>();
	}

	/**
	 * ritorna la posizione del cavallo
	 * @return
	 */
	public int  get_posizione() {
		return this.posizione;		
	}
	
	/**
	 * setta la posizione del cavallo quando viene mosso
	 * @param pos rappresenta di quanto spostare il cavallo
	 */
	public void set_posizione(int pos) {
		this.posizione=pos;		
	}
	
	/**
	 * ritorna colore del cavallo
	 * @return
	 */
	public String get_color() {
		return this.colore;
	}
	
	/**
	 * Ritorna se il cavallo e' in gioco o ha gia' passato il traguardo
	 * @return
	 */
	public int get_in_game()
	{
		return this.in_game;
	}
	
	/**
	 * Una volta che il cavallo e' arrivato viene segnato come fuori 
	 * dal gioco
	 */
	public void out_of_game()
	{
		this.in_game = 0;
	}
	
	/**
	 * Aggiunge carta azione ad un cavallo
	 * @param carta
	 */
	public void add_carta_azione(Carta_azione carta){
		carte_azione.add(carta);
	}
	
	/**
	 * Rimuove carta azione dal cavallo nel caso vengano giocate 2 carte
	 * dello stesso gruppo
	 * @param carta
	 */
	public void delete_action_card(Carta_azione carta) {
		carte_eliminate.add(carta);
		carte_azione.remove(carta);
	}
	
	/**
	 * Ritorna le carte azione legate ad un cavallo senza esporre il rep
	 * @return
	 */
	public ArrayList<Carta_azione> get_carte_azione(){
		ArrayList<Carta_azione> carte_az = new ArrayList<Carta_azione>();
		for (Carta_azione carta : carte_azione) {
			carte_az.add(carta);
		}
		return carte_az;	
	}
	
	public ArrayList<Carta_azione> get_carte_eliminate(){
		ArrayList<Carta_azione> carte_az_el = new ArrayList<Carta_azione>();
		for (Carta_azione carta : carte_eliminate) {
			carte_az_el.add(carta);
		}
		return carte_az_el;	
	}
	
	/**
	 * Data una carta, il cavallo cerca tra le sue carte azione se quella
	 * carta e' presente e ritorna un boolean
	 * Utile per capire lato corsa se un cavallo possiede una determinata carta delegando
	 * il controllo qua dentro.
	 * @param s e' la stringa ( nome della carta ) da cercare 
	 * @return boolean 
	 */
	public boolean have_got_card(String s)
	{
		for(Carta_azione ca : carte_azione)
		{
			if(s.equals(ca.getNome()))
				{ return true; }
		}
		return false;
	}
	
	/**
	 * mostro a schermo le carte associate a cavallo
	 */
	public String get_string_carte_azione() {
		String string =new String();
		if (carte_azione.isEmpty())
			{ return"Non ci sono carte su questo cavallo"; }
		else{
			for (Carta_azione carta : carte_azione) {
				string+=carta.get_string_card();		
			}
			return string;
		}
	}

	/**
	 * 
	 * Questa compareTo serve per effettuare l'ordinamento in modo comodo
	 * nella tabella finalisti.
	 * Data una lista di cavalli che hanno tagliato il traguardo in questo modo
	 * viene fatto un ordinamento prima in base alla posizione, poi se queste 
	 * sono uguali sulla presenza o meno di eventuali carte azione e quindi sulla
	 * quotazione.
	 * se e' impossibile decidere this vince sempre.
	 * 
       
    */
	
	public int compareTo(Cavallo c) {
		Lavagna lavagna = Lavagna.creaLavagna();
		if( c == this) return 0;
		if(get_posizione() > c.get_posizione())
			{ return -1; }
		if(get_posizione() < c.get_posizione())
		  { return 1; }
		else
		  {
			if(have_got_card("in_igni_veritas"))
				 { return -1; } // se ho in_igni_veritas piazzo il cavallo in cima alla lista finalisti
			 else
				 if(have_got_card("mala_tempora"))
					 { return 1; }// se ho mala tempora lo piazzo nella ultima posizione dei finalisti
			if(lavagna.getPosizione(colore) < lavagna.getPosizione(c.colore))
			   { return -1; }
			if(lavagna.getPosizione(colore) > lavagna.getPosizione(c.colore))
				   { return 1; }
			else
				   { return -1; }
		  }
	}
	
	/**
	 * Implementazione della equals per rispettare la regola dell'interfaccia
	 * della comparable :
	 * The natural ordering for a class C is said to be consistent with equals if and 
	 * only if e1.compareTo(e2) == 0 has the same boolean value as e1.equals(e2) f class C
	 */
	   public boolean equals(Object o) {
	        if (!(o instanceof Cavallo))
	            return false;
	        Cavallo horse = (Cavallo) o;
	        if (horse==this) 
	        	return true;
	        else
	        	return false;
	    }
	   
	   public int hashCode() {
		   assert false : "hashCode not designed";
		   return 1; // any arbitrary constant will do 
		   }
}