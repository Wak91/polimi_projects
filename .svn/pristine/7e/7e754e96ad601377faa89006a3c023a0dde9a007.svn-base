package Model;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;

import View.Text_interface;
import View.User_interface;

public class Game implements Model_interface{
	
	private  User_interface Ui;
	private  Card_handler card_h;
	
	//---NUMERO TURNI DELLA PARTITA
	private  int turni;
	//-----------------------------------------------
	
	//---servono per gara---
	private int spostamento;
	private boolean state;
	private ArrayList <Cavallo> elenco_pedine = new ArrayList <Cavallo>();
	private String colore1,colore2;
	private int sprint=1; 
	private ArrayList <Cavallo> finalisti = new ArrayList <Cavallo>();
	private ArrayList <String> classifica = new ArrayList <String>();
	private int num_cavalli;
	
	//---LUNGHEZZA DEL PERCORSO 
	private  int lunghezza_percorso = 12;
	//-----------------------------------------------
	
	//---DISPONIBILITA DI SEGNALINI PER SCUDERIA
	private  HashMap <String , Integer> disp_scuderia;
	//-----------------------------------------------
	
	//---SCUDERIE
	private  ArrayList <String> colori;
	//-----------------------------------------------
	
	//---MAPPA GIOCATORI-SEGNALINI SCUD-NUMERO TURNI
	private  HashMap<Integer,Integer[]> map_segnalino; 	
	//-----------------------------------------------
	
	//---ELENCO GIOCATORI
	private  ArrayList <Giocatore> elenco_giocatori = new ArrayList <Giocatore>();
	//-----------------------------------------------
	
	//---ELENCO PEDINE
	
	//-----------------------------------------------
	
	//---INIZIALIZZAZIONE MAZZI---
	private  Mazzo mAzione = new Mazzo();
	private  Mazzo mPersonaggio = new Mazzo();
	private  Mazzo mMovimento = new Mazzo();
	//-----------------------------------------------
		
	
	public Game () 
	        {
		    INIT();
		    card_h = new Card_handler();
	        } 
	
	public void add_card_player(Giocatore player){
		player.add_action_card((Carta_azione) mAzione.pesca());
		player.add_action_card((Carta_azione) mAzione.pesca());
	}
	


	
	public boolean check_disp_scuderia(String colore){
		
		if(disp_scuderia.get(colore)!=0)
			{
			sub_segnalino_color(colore);
			return true;
			}
		else
		    { return false;}
	}
	

	
	public boolean check_tipo_scommessa(Giocatore player , String  bet_type , String colore)
	{
		for (Scommessa scommessa : player.get_scommesse()) {
			if (scommessa.get_tipo()== bet_type && scommessa.get_colore()==colore)
			{ 
				return false; }
		}
		return true;	
	}
	
	public void piazza_scommessa(Giocatore player , int value , String type , String color)
	{
		player.Scommette(value, color, type);
	}
	
	
	public void create_player(String nome)
	{
		Carta_personaggio card = (Carta_personaggio) mPersonaggio.pesca();
    	elenco_giocatori.add(new Giocatore (nome,card));
	}
	

	
	
	public Carta_azione card_at_index(int i,Giocatore player){
		return player.get_card_at_index(i);
	}
	
	public Cavallo horse_from_color(String color) {
		for (Cavallo horse : elenco_pedine) {
			if (horse.get_color().equals(color)){
				return horse;
			}
		}
		return null; //non viene mai eseguito

	}

	//<-------------------------------------------------GETTER----------------------------------------------------------------->
	
    public int getLunghezzaPercorso()	
    {
    	return lunghezza_percorso;
    }
	
	/**
	 * Ritorna il reference al mazzo dei personaggi
	 * @return
	 */
	public  Mazzo getMazzoPersonaggi()
	{
		return mPersonaggio;
	}
	
	/**
	 * Ritorna il reference al mazzo delle carte azione
	 * @return
	 */
	public  Mazzo getMazzoAzione()
	{
		return mAzione;
	}
	
	
	/**
	 * Interroga la hash table che modella le regole del gioco per estrarre la corrispondenza
	 * tra numero-giocatori e numero turni di gioco
	 * @param num_players
	 * @return
	 */
	public  int get_num_turni(int num_players)
	{
		Integer arry[] = map_segnalino.get(num_players);
		return arry[1];
	}
	
	/**
	 * Interroga la hash table che modella le regole del gioco per estrarre la corrispondenza
	 * tra numero-giocatori e numero segnalini scommessa per scuderia
	 * @param num_players
	 * @return
	 */
	public  int get_num_segnalini(int num_players)
	{
		Integer arry[] = map_segnalino.get(num_players);
		return arry[0];
	}
	
	/**
	 * Ritorna il reference all'arraylist di colori che rappresentano
	 * le nostre scuderie
	 * @return
	 */
	public  ArrayList <String> get_colori()
	{
		return colori;
	}
	
	/**
	 * Ritorna l'elenco delle pedine cavallo in gioco
	 * @return
	 */
	public  ArrayList <Cavallo> get_cavalli()
	{
		return elenco_pedine;
	}
	
	/**
	 * Ritorna la lista di giocatori senza esporre il rep
	 * @return
	 */
	public  ArrayList <Giocatore> get_giocatori()
	{
		ArrayList <Giocatore> gio = new ArrayList <Giocatore>();
		for(Giocatore g : elenco_giocatori)
		   {
			gio.add(g);
		   }
	    return gio;
	}
	
	public ArrayList <Scommessa> get_player_bets(Giocatore player)
	{
		return player.get_scommesse();
	}
	
	public ArrayList <String> getClassifica()
	{
		return classifica;
	}
	
	//<-----------------INIZIO METODI DI INIZIALIZZAZIONE-------------------------->
	
	public  void init_cavalli(){
		for (String colore : colori) {
			Cavallo c = new Cavallo(colore);
			elenco_pedine.add(c);
		}		
	}
	
	/**
	 * inizializzazione casuale delle quotazioni.
	 */
	public  void init_quotazioni()
	{
		 Collections.shuffle(colori);
	        int key=0;
	        for(String s : colori)
	        {
	        Quotazione q = new Quotazione(key,s);
	        Lavagna.aggiungi_quotazione(q);
	        key++;
	        }	
	}
	
	/**
	 *inizializza la hashtable da cui ricavero il numero segnalini 
	 *in funzione del numero di giocatori
	 */
	public  void init_hash(){
		map_segnalino=new HashMap<Integer,Integer[]>();
		map_segnalino.put(0,new Integer[] {-1,-1});
		map_segnalino.put(1,new Integer[] {-1,-1});
		map_segnalino.put(2,new Integer[] {1,6});
		map_segnalino.put(3,new Integer[] {2,6});
		map_segnalino.put(4,new Integer[] {3,4});
		map_segnalino.put(5,new Integer[] {4,5});
		map_segnalino.put(6,new Integer[] {4,6});
		//gia che ci sono istanzio anche la hash base che variera'
		disp_scuderia = new HashMap <String, Integer>();
	}
	
	/**
	 * Inizializzazione di tutti i colori in gioco ( tutte le scuderie ) 
	 */
	public  void init_colori(){
		
		colori = new ArrayList <String>();
		colori.add("nero");
		colori.add("blu");
		colori.add("verde");
		colori.add("rosso");
		colori.add("giallo");
		colori.add("bianco");
		
	}
	
	/**
	 * In base al numero di giocatori in gioco setto il numero di segnalini
	 * scommessa per ogni scuderia
	 */
	public  void init_segnalini(){
		Integer num_senalini = map_segnalino.get(elenco_giocatori.size())[0];
		for (String color : colori) {
			disp_scuderia.put(color, num_senalini);
		}
	}
	
	
	
	/**
	 * Metodo utilizzato come entry point del gioco, che effettua le 
	 * operazioni di inizializzazione di tutte le variabili globali
	 */
	public  void INIT()
	  {
		Carta_azione.Extract_all_in(mAzione);
		Carta_personaggio.Extract_all_in(mPersonaggio);
		Carta_movimento.Extract_all_in(mMovimento);
		init_colori();
		init_cavalli();
		init_hash();
		init_quotazioni();
		Collections.shuffle(elenco_giocatori);
	  }
	
//<-----------------FINE METODI DI INIZIALIZZAZIONE---------------------------------------->

	/**
	 * Toglie un sengalino scommessa dalla scuderia passata come parametro.
	 * @param color
	 */
	public void sub_segnalino_color(String color) {
		Integer old = disp_scuderia.get(color);
		disp_scuderia.put(color, old-1);
	}
	
	/**
	 * Aggiunge una carta azione ad un cavallo controllando che non si annulli con
	 * un'altra preesistente, se si annulla le butta tutte e 2.
	 * @param horse
	 * @param played_card
	 */
	public  void add_card_horse(Cavallo horse, Carta_azione played_card){
		int deleted=0;
		for (Carta_azione carta_azione : horse.get_carte_azione()) {
			if (carta_azione.get_classe()==played_card.get_classe()){
				horse.delete_action_card(carta_azione);
				deleted=1;
			}		
		}
		if(deleted==0) {
			horse.add_carta_azione(played_card);
		}
	}	 
	 
	
	public void partenza()
	{
		num_cavalli = elenco_pedine.size();
		mMovimento.mischia();
		Carta_movimento card = (Carta_movimento)mMovimento.pesca();
		for( Cavallo horse : elenco_pedine)
		  {
			card_h.check_special_card(horse);
			spostamento = card.get_movimento(Lavagna.getPosizione(horse.get_color()));
			state = card_h.check_carte_partenza(horse,spostamento); //check sugli effetti delle carte partenza
			if(state==false) //qua ci vado solo se il check sulle carte ha dato esito negativo
				{ horse.set_posizione(horse.get_posizione()+spostamento); }
			//System.out.println("posizioni dopo partenza"+c.get_color()+" posizione "+c.get_posizione());
		  }
	}
	
	public boolean running () 
	{
		Carta_movimento card = (Carta_movimento)mMovimento.pesca();
		// card.visualizza();
		for( Cavallo horse : elenco_pedine)
		  {
			if(horse.get_in_game()==1)
			  {
			   state = card_h.check_position_card(horse , elenco_pedine);
			   if(state == false)
			      {
			       int pos = horse.get_posizione();
			       spostamento = card.get_movimento(Lavagna.getPosizione(horse.get_color()));
			       horse.set_posizione(pos+spostamento);
			      }
			  }
			//System.out.println("posizioni dopo il movimento" + horse.get_color()+" posizione "+horse.get_posizione());
		  }
		
		//QUA CONTROLLO XIII E FUSTIS ET RADIX.
		for ( Cavallo horse : elenco_pedine)
		   {
			if(horse.get_in_game()==1)
			   {
				card_h.check_final_card(horse,lunghezza_percorso); //check sugli effetti di fine gara se qualcuno ci e' gia' arrivato
			   }
			//System.out.println("posizioni dopo XII e FUSTIS " + horse.get_color()+" posizione "+horse.get_posizione());
		   }
		
		//<--FASE SPRINT-->
		colore1 = colori.get((int) (Math.random()*colori.size()));
		colore2 = colori.get((int) (Math.random()*colori.size()));
		//System.out.println("sprintano:" + colore1 + " " + colore2);
		for ( Cavallo horse : elenco_pedine )
		    {
			if(horse.get_in_game()==1)
			{
			 if((colore1.equals(horse.get_color())) || colore2.equals(horse.get_color()))
				 {state = card_h.check_carte_sprint(horse,sprint);
				  if(state == false)
					  { horse.set_posizione(horse.get_posizione()+sprint); }
				 }
			} 
			//System.out.println("posizioni dopo sprint : "+ horse.get_color()+" posizione "+horse.get_posizione());

		   }
		//<--CONTROLLO SE QUALCUNO E' ARRIVATO IN FONDO--->
		
		for  ( Cavallo horse : elenco_pedine)
			{
			if(horse.get_posizione()>lunghezza_percorso && horse.get_in_game()==1)
				{
				horse.out_of_game(); 
				finalisti.add(horse);
				}
			}
		if(finalisti.size()>1)
			{ Collections.sort(finalisti); } //ordina i cavalli nella tabella finalisti sulla base del compare
			
			  /*System.out.println("Array finalisti");								//just debug
		       for(Cavallo horse : finalisti)
			       System.out.println(horse.get_color());*/
			
		for(Cavallo horse : finalisti)
			{ classifica.add(horse.get_color()); }
		num_cavalli-=finalisti.size();
		finalisti.clear();
		if(num_cavalli==0)
			{ return false; }
		return true;	
	}
	
	/**
	 * controlla se il giocatore ha abbastanza soldi per la min_bet 
	 * altrimenti sottrae 2 pv se non ne ha lo elimina dai giocatori 
	 * Questo metodo continua a togliere pv fino a che non ci sono abbastanza
	 * soldi per coprire la scommessa minima
	 * @param player giocatore da analizzare
	 * @return true se ha abbastanza soldi o false se non ne ha
	 */
	private  void check_enough_money(Giocatore player) {
		boolean togliPv;
		while (player.get_money()<player.get_min_bet()){
			 togliPv = player.sub_pv(2);
			if	(!togliPv){						//significa che il giocatore non ha abbastanza pv -> elimino
				Ui.game_over_player(player);
				elenco_giocatori.remove(player);		
			}	
		}
	}
	
	/**
	 * Metodo che paga le scommesse vinte/piazzate per ogni giocatore
	 * 
	 * @param classifica
	 * @param player
	 */
	public ArrayList<Integer> make_payment_bet(Giocatore player , Scommessa scommessa) {
	int win_money;
	ArrayList <Integer> price = new ArrayList <Integer> ();		
	  if (scommessa.get_colore().equals(classifica.get(0))) {
		 if (scommessa.get_tipo().equals("Vincente")){
			player.add_pv(3);
			win_money=Lavagna.getPosizione(classifica.get(0))*scommessa.getDenaro();
			player.set_money(player.get_money()+win_money); 
			price.add(win_money);
			price.add(3);
			return price;
			}
		else {
			  if (scommessa.get_tipo().equals("Piazzata")){
				player.add_pv(1);
				win_money=2*scommessa.getDenaro();
				player.set_money(player.get_money()+win_money);
				price.add(win_money);
				price.add(1);
				return price;  //ritorno i premi vinti dal giocatore per stamparli
				}
			}
			
	  }
		
	  else if ((scommessa.get_colore()==classifica.get(2)||scommessa.get_colore()==classifica.get(1))&&scommessa.get_tipo().equals("Piazzata")) {
				player.add_pv(1);
				win_money=2*scommessa.getDenaro();
				player.set_money(player.get_money()+win_money); 
				price.add(win_money);
				price.add(1);
				return price;
			}
			
		
		return null; // non ha vinto niente 
	}
	
	/**
	 * Metodo che paga le scuderie vincenti ai rispettivi proprietari.
	 * I premi sono dichiarati come variabile locale in modo da poter 
	 * cambiare in futuro.
	 * @param classifica
	 * @param player
	 */
	public ArrayList <Integer> make_payment_scud(Giocatore player){
		ArrayList <Integer> price = new ArrayList<Integer>();
		final int primo_premio=600;
		final int secondo_premio=400;
		final int terzo_premio=200;
		if(player.get_scuderia().equals(classifica.get(0))){
			player.set_money(player.get_money()+primo_premio);
			price.add(primo_premio);
			return price;
		}
		else if(player.get_scuderia()==classifica.get(1)){
			player.set_money(player.get_money()+secondo_premio);
			price.add(secondo_premio);
			return price;
		}
		else if(player.get_scuderia()==classifica.get(2)){
			player.set_money(player.get_money()+terzo_premio);
			price.add(terzo_premio);
			return price;
		}	
	return null;
	}
	
	public void sistema_giocatori(Giocatore player)
	{
		player.drop_card(); // butto le carte del giocatore 
		player.drop_scommesse(); //elimino scommesse questo giro
	}
	
	public boolean sistema_gioco()
	{
		turni--;
		for (Giocatore player : elenco_giocatori) {
			check_enough_money(player);
			}
		//Lavagna.updateLavagna(classifica);
		classifica.clear(); 
		elenco_pedine.clear();
		init_cavalli();
		init_segnalini();
		mMovimento.mischia();
		mAzione.mischia();
		if (elenco_giocatori.size()==0){
			return true;
		}
		if (elenco_giocatori.size()==1) {
			return true;
		}
		if (turni==0) {
			sort_by_pv();
			return true;
		}
		
		return false;
	}
	/**
	 * Ordina l'elenco dei giocatori sulla base dei pv.
	 */
	private  void sort_by_pv(){
		Collections.sort(elenco_giocatori);
	}	
}