package it.polimi.ingegneriaDelSoftware2013.horseFever_lorenzo2.fontana_fabio1.gritti;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Observable;
import java.util.Scanner;



public class Game {
	
	private static User_interface Ui;
	private static ArrayList <String> classifica = new ArrayList <String>();  //classifica di colori temporanea e poi sara' quella finale
	
	//switch tra il tipo di interfaccie, per ora ne abbiamo solo 2...
	private static int mode; //0=text 1=GUI
	//-----------------------------------------------
	
	//---NUMERO TURNI DELLA PARTITA
	private static int turni;
	//-----------------------------------------------
	
	//---DISPONIBILITA DI SEGNALINI PER SCUDERIA
	private static HashMap <String , Integer> disp_scuderia;
	//-----------------------------------------------
	
	//---SCUDERIE
	private static ArrayList <String> colori;
	//-----------------------------------------------
	
	//---MAPPA GIOCATORI-SEGNALINI SCUD-NUMERO TURNI
	private static HashMap<Integer,Integer[]> map_segnalino; 	
	//-----------------------------------------------
	
	//---ELENCO GIOCATORI
	private static ArrayList <Giocatore> elenco_giocatori = new ArrayList <Giocatore>();
	//-----------------------------------------------
	
	//---ELENCO PEDINE
	private static ArrayList <Cavallo> elenco_pedine = new ArrayList <Cavallo>();
	//-----------------------------------------------
	
	//---INIZIALIZZAZIONE MAZZI---
	private static Mazzo mAzione = new Mazzo();
	private static Mazzo mPersonaggio = new Mazzo();
	private static Mazzo mScuderia = new Mazzo();
	private static Mazzo mMovimento = new Mazzo();
	//-----------------------------------------------
		
	
    //<-------------------------------------------------SETTER------------------------------------------------------------------------------->
	/**
	 * Funzione che viene richiamata da un interfaccia sotto e che setta il numero di
	 * turni del gioco andando a guardare nella hash table quanti turni corrispondono a ng giocatori
	 * @param ng rappresenta il numero di giocatori passato da un interfaccia text, gui, segnali fumo..
	 */
	public static void set_turni(int ng)
	{
		turni = get_num_turni(ng);
	}
		
	/**
	 * Inizializza la hash table in funzione del numero di giocatori, assegnando ad ogni colore ( scuderia )
	 * il numero di segnalini corrispondente alle regole del gioco
	 * @param num_g rappresenta il numero di giocatori passato da un interfaccia e dal suo metodo get_players_option
	 */
	public static void set_hash(int num_g)
	{
		for(String c : colori )
		{
			disp_scuderia.put(c, (get_num_segnalini(num_g)));
		}
	}
	
	//<-------------------------------------------------GETTER----------------------------------------------------------------->
	public static Mazzo getMazzoPersonaggi()
	{
		return mPersonaggio;
	}
	
	public static Mazzo getMazzoAzione()
	{
		return mAzione;
	}
	
	
	/**
	 * Interroga la hash table che modella le regole del gioco per estrarre la corrispondenza
	 * tra numero-giocatori e numero turni di gioco
	 * @param num_players
	 * @return
	 */
	public static int get_num_turni(int num_players)
	{
		Integer arry[] = map_segnalino.get(num_players);
		return arry[1];
	}
	
	/**
	 * Interroga la hash table che modella le regole del gioco per estrarre la corrispondenza
	 * tra numero-giocatori e numero segnalini scommessa per scuderia
	 * @param num_players
	 * @return
	 */
	public static int get_num_segnalini(int num_players)
	{
		Integer arry[] = map_segnalino.get(num_players);
		return arry[0];
	}
	
	public static ArrayList <String> get_colori()
	{
		return colori;
	}
	
	public static ArrayList <Cavallo> get_cavalli()
	{
		return elenco_pedine;
	}
	
	/**
	 * Ritorna la lista di giocatori senza esporre il rep
	 * @return
	 */
	public static ArrayList <Giocatore> get_giocatori()
	{
		ArrayList <Giocatore> gio = new ArrayList <Giocatore>();
		for(Giocatore g : elenco_giocatori)
		   {
			gio.add(g);
		   }
	    return gio;
	}

	/**
	 * legge il numero di giocatori controllando che sia compreso tra 2 e 5 e inizializza chiedendo i nomi
	 */

	public static void init_players() {
		elenco_giocatori = Ui.get_players();
		}
	
	public static void init_cavalli(){
		for (String colore : colori) {
			Cavallo c = new Cavallo(colore);
			elenco_pedine.add(c);
		}		
	}
	
	public static void init_quotazioni()
	{
		 Collections.shuffle(colori);
	        int key=0;
	        for(String s : colori)
	        {
	        Quotazione q = new Quotazione(key,s);
	        Lavagna.aggiungi_quotazione(q);
	        key++;
	        }	
	}
	
	/**
	 *inizializza la hashtable da cui ricavero il numero segnalini in funzione del numero di giocatori
	 */
	public static void init_hash(){
		map_segnalino=new HashMap<Integer,Integer[]>();
		map_segnalino.put(2,new Integer[] {1,6});
		map_segnalino.put(3,new Integer[] {2,6});
		map_segnalino.put(4,new Integer[] {3,4});
		map_segnalino.put(5,new Integer[] {4,5});
		map_segnalino.put(6,new Integer[] {4,6});
		//gia che ci sono istanzio anche la hash base che varierï¿½
		disp_scuderia = new HashMap();
	}
	
	public static void init_colori(){
		
		colori = new ArrayList <String>();
		colori.add("nero");
		colori.add("blu");
		colori.add("verde");
		colori.add("rosso");
		colori.add("giallo");
		colori.add("bianco");
		
	}
	
	private static void init_segnalini(){
		Integer num_senalini = map_segnalino.get(elenco_giocatori.size())[0];
		for (String color : colori) {
			disp_scuderia.put(color, num_senalini);
		}
	}
	
	
	
	/**
	 * Metodo utilizzato come entry point del gioco, che effettua le operazioni piu basilari
	 */
	public static void INIT()
	  {
		Carta_azione.Extract_all_in(mAzione);
		Carta_personaggio.Extract_all_in(mPersonaggio);
		Carta_scuderia.Extract_all_in(mScuderia);
		Carta_movimento.Extract_all_in(mMovimento);
		init_colori();
		init_cavalli();
		init_hash();
		init_quotazioni();
		init_players();
		init_segnalini();  //dopo players perche si adegua al numero di giocatori
		Collections.shuffle(elenco_giocatori);
	  }
	
//<----------------------------------------SCOMMESSE--------------------------------------->
	
	private static void sub_segnalino_color(String color) {
		Integer old = disp_scuderia.get(color);
		disp_scuderia.put(color, old-1);
	}
	
	
	private static boolean tipo_scommessa_ok(Giocatore player, String tipo,String colore){
		for (Scommessa scommessa : player.get_scommesse()) {
			if (scommessa.get_tipo()==tipo && scommessa.get_colore()==colore)
				return false;
		}
		return true;
	}
	
	public static void primo_giro_scommesse() {
		String colore_scommessa;
		int importo_scommessa;
		String tipo_scommessa;
		ArrayList<Giocatore> players = get_giocatori(); 
		
		for (Giocatore player : players) {	
			player.add_action_card((Carta_azione)mAzione.pesca());		//pesco e mostro carte azione
			player.add_action_card((Carta_azione)mAzione.pesca());
			Ui.show_action_card(player);
			colore_scommessa = Ui.get_cavallo_scommessa();			//prendo il colore scommessa
			while (disp_scuderia.get(colore_scommessa)==0){			//controllo se segnali sul cavallo sono sufficienti
				colore_scommessa = Ui.get_cavallo_scommessa("SEGNALINI CAVALLO ESAURITI SCOMMETTI SU UN ALTRO COLORE");
			}
			sub_segnalino_color(colore_scommessa);
			
			importo_scommessa = Ui.get_soldi_scommessa(player);	//prendo soldi
			
			tipo_scommessa =Ui.get_tipo_scommessa();//prendo il tipo e controllo regola piazzato vincente
			while (!tipo_scommessa_ok(player, tipo_scommessa, colore_scommessa)){
				tipo_scommessa =Ui.get_tipo_scommessa("HAI GIA FATTO UNA SCOMMESSA COSI SE HAI SCELTO PIAZZATO ORA SCEGLI VINCENTE E VICEVERSA");
			}
			
			player.Scommette(importo_scommessa, colore_scommessa, tipo_scommessa);//piazzo scommessa
		}
		Ui.show_all_bet();		

	}
	
	public static void secondo_giro_scommesse() {
		String colore_scommessa;
		int importo_scommessa;
		String tipo_scommessa;
		boolean seconda_scommessa = false;
		ArrayList<Giocatore> players = get_giocatori(); 
		
		Collections.reverse(players); //deve scommettere a partire dall'ultimo
		for (Giocatore player : players) {	
			if (player.get_money()>player.get_min_bet())			// controllo se ha abbastanza soldi per la seconda scommessa e se vuole farla
				seconda_scommessa=Ui.make_seconda_scommessa(player);
			else {
				Ui.not_enough_money(player.get_nome());
				seconda_scommessa=false;
			}
			if (seconda_scommessa==true){	
				colore_scommessa = Ui.get_cavallo_scommessa();			//prendo il colore scommessa
				while (disp_scuderia.get(colore_scommessa)==0){			//controllo se segnali sul cavallo sono sufficienti
					colore_scommessa = Ui.get_cavallo_scommessa("SEGNALINI CAVALLO ESAURITI SCOMMETTI SU UN ALTRO COLORE");
				}
				sub_segnalino_color(colore_scommessa);
				
				importo_scommessa = Ui.get_soldi_scommessa(player);	//prendo soldi
				
				tipo_scommessa =Ui.get_tipo_scommessa();
				while (!tipo_scommessa_ok(player, tipo_scommessa, colore_scommessa)){
					tipo_scommessa =Ui.get_tipo_scommessa("HAI GIA FATTO UNA SCOMMESSA COSI SE HAI SCELTO PIAZZATO ORA SCEGLI VINCENTE E VICEVERSA");
				}
				
				player.Scommette(importo_scommessa, colore_scommessa, tipo_scommessa);//piazzo scommessa
			}
			
		}
		Ui.show_all_bet();		

			
	}
	
	/**
	 * gestione delle scommesse 
	 */
/*	public static void giroScommesse(boolean obbligario) {
		String colore_scommessa;
		int importo_scommessa;
		String tipo_scommessa;
		boolean seconda_scommessa = false;
		ArrayList<Giocatore> players = get_giocatori(); //NB non voglio elenco_giocatori ma una sua copia perche faccio operazioni come reverse e non voglio modifichino l'elenco_giocatori globale
		
		if (obbligario==false){		//0)sarei nel secondo giro di scommesse quindi deve scommettere a partire dall'ulrimo
			Collections.reverse(players);
		}
			
		
		for (Giocatore player : players) {	
			if (obbligario==false)			// 1)eseguito nel secondo giro di scommesse chiedo se vuole effettuarla
				seconda_scommessa=Ui.make_seconda_scommessa(player);
			
			else{							//2)eseguito nel primo giro di scommesse pesco le carte
				player.add_action_card((Carta_azione)mAzione.pesca());		//pesco e mostro carte azione
				player.add_action_card((Carta_azione)mAzione.pesca());
				Ui.show_action_card(player);
			}
			if (seconda_scommessa==true|| obbligario==true){	//3)esuguito nel primo giro o nel secondo nel caso di risposta affermativa
				colore_scommessa = Ui.get_cavallo_scommessa();			//prendo il colore scommessa
				while (disp_scuderia.get(colore_scommessa)==0){			//controllo se segnali sul cavallo sono sufficienti
					colore_scommessa = Ui.get_cavallo_scommessa("SEGNALINI CAVALLO ESAURITI SCOMMETTI SU UN ALTRO COLORE");
				}
				sub_segnalino_color(colore_scommessa);
				
				importo_scommessa = Ui.get_soldi_scommessa(player);	//prendo soldi
				
				tipo_scommessa =Ui.get_tipo_scommessa();
				while (!tipo_scommessa_ok(player, tipo_scommessa, colore_scommessa)){
					tipo_scommessa =Ui.get_tipo_scommessa("HAI GIA FATTO UNA SCOMMESSA COSI SE HAI SCELTO PIAZZATO ORA SCEGLI VINCENTE E VICEVERSA");
				}
				
				player.Scommette(importo_scommessa, colore_scommessa, tipo_scommessa);//piazzo scommessa
			}
				
		}
		Ui.show_all_bet();		
	}*/
//-----------------------------TRUCCARE GARA--------------------------->
	public static void truccare_gara() {
		for (Giocatore player : elenco_giocatori) {
			Carta_azione played_card = Ui.get_action_card_played(player);
			Cavallo horse = Ui.get_horse_affected();
			add_card_horse(horse, played_card);
			
			}
		Ui.show_affected_horse();			//ho sbagliato bisogna scoprirle dopo ma va be lo lascio per far vedere che ha aggiunto le carte ai cavalli
	}
	
	private static void add_card_horse(Cavallo horse, Carta_azione played_card){
		int deleted=0;
		for (Carta_azione carta_azione : horse.get_carte_azione()) {
			System.out.println("Classe carta azione "+carta_azione.get_classe());
			System.out.println("Classe carta giocata "+played_card.get_classe());
			if (carta_azione.get_classe()==played_card.get_classe()){
				horse.delete_action_card(carta_azione);
				deleted=1;
			}		
		}
		if(deleted==0) {
			horse.add_carta_azione(played_card);
		}
	}
	
	//-----ENTRY POINT DEL GIOCO
	public static void main (String args[])
	{	boolean fine=false;
      if(mode==0)
         {
    	  Ui = new Text_interface ();
         }
      //else
    	  //GUI_interface Gi = new Gui_interface();
	      
      	INIT(); 
	      //parte di gioco che si ripete fino alla fine dei turni.
	    do{  
	      	primo_giro_scommesse() ;  
	      	truccare_gara();
		    secondo_giro_scommesse();	
		    gara();
		    fine=paga_sistema();
	    }while(fine==false);

      
	}
	
	/**
	 * XXX 1) ricordarsi di mettere a posto elenco_segnalini
	 *     2) parlare col fons dell'altra idea per effetti, array di effetti su cavallo
	 *     3) risolvere alcuni problemi qua dentro, le classifiche non sono giuste...forse sbaglio astampare?
	 */
	public static void gara()
	{
		ArrayList <Cavallo> finalisti = new ArrayList <Cavallo>(); //oggetto che serve per gestire i cavalli che tagliano il traguardo assieme
		int spostamento;
		boolean fine=false;
		int sprint=1; // valore dello sprint iniziale
		int lunghezza_percorso = 12;
		int num_cavalli = elenco_pedine.size();
		String colore1,colore2;
		boolean state;
		//<------PARTENZA------->
		/**
		 * Faccio un check sulle carte azione presenti sul cavallo, se ce ne sono ci pensano loro
		 * a settare la posizione corretta del cavallo e ritorno true al chiamante che non spostera'
		 * piu' niente, altrimenti se torno false vuol dire che non c'erano carte azione
		 * e devo muovere io il cavallo della quota scritta nella carta_movimento 
		 */
		Ui.show_affected_horse();
		Carta_movimento card = (Carta_movimento)mMovimento.pesca();
		card.visualizza(); // da mettere in text_interface 
		
		for( Cavallo c : elenco_pedine)
		  {
			spostamento = card.get_movimento(Lavagna.getPosizione(c.get_color()));
			state = check_carte_partenza(c,spostamento); 
			if(state==false) //qua ci vado solo se il check sulle carte ha dato esito negativo
				c.set_posizione(c.get_posizione()+spostamento);
			System.out.println("posizioni dopo partenza"+c.get_color()+" posizione "+c.get_posizione());
			}
		
		Ui.show_corsa(elenco_pedine,lunghezza_percorso);
		
		//<------ORA SI ENTRA NELLA FASE DI CORSA FINO A CHE TUTTI NON PASSANO IL TRAGUARDO------
		
		do
		{
		card = (Carta_movimento)mMovimento.pesca();
		card.visualizza();
		for( Cavallo horse : elenco_pedine)
		  {
			if(horse.get_in_game()==1)
			{
			state = check_position_card(horse , elenco_pedine);
			if(state == false)
			{
			 int pos = horse.get_posizione();
			 spostamento = card.get_movimento(Lavagna.getPosizione(horse.get_color()));
			 horse.set_posizione(pos+spostamento);
			}
			}
			System.out.println("posizioni dopo il movimento" + horse.get_color()+" posizione "+horse.get_posizione());

		  }
		
		//QUA CONTROLLO XIII E FUSTIS ET RADIX.
		for ( Cavallo horse : elenco_pedine)
		   {if(horse.get_in_game()==1)
			{
			if(horse.get_posizione() > lunghezza_percorso && horse.have_got_card("XIII"))
				horse.set_posizione(lunghezza_percorso+1);
			else
				if(horse.get_posizione() > lunghezza_percorso && horse.have_got_card("fustis_et_radix"))
					horse.set_posizione(horse.get_posizione()+2);
			}
			System.out.println("posizioni dopo XII e FUSTIS " + horse.get_color()+" posizione "+horse.get_posizione());

		   }
		
		//<--FASE SPRINT-->
		colore1 = colori.get((int) (Math.random()*colori.size()));
		colore2 = colori.get((int) (Math.random()*colori.size()));
		System.out.println("sprintano:" + colore1 + " " + colore2);
		for ( Cavallo horse : elenco_pedine )
		    {
			if(horse.get_in_game()==1)
			{
			 if((colore1.equals(horse.get_color())) || colore2.equals(horse.get_color()))
				 {state = check_carte_sprint(horse,sprint);
				  if(state == false)
					  horse.set_posizione(horse.get_posizione()+sprint);
				 }
			} 
			System.out.println("posizioni dopo sprint : "+ horse.get_color()+" posizione "+horse.get_posizione());

		   }
		//<--CONTROLLO SE QUALCUNO E' ARRIVATO IN FONDO--->
		
		for  ( Cavallo horse : elenco_pedine)
			if(horse.get_posizione()>lunghezza_percorso && horse.get_in_game()==1)
				{
				horse.out_of_game(); 
				finalisti.add(horse);
				}
		if(finalisti.size()>1)
			Collections.sort(finalisti); //ordina i cavalli nella tabella finalisti sulla base del compare
			System.out.println("Array finalisti");								//just debug
		for(Cavallo horse : finalisti)
			System.out.println(horse.get_color());
		for(Cavallo horse : finalisti)
			classifica.add(horse.get_color());
		num_cavalli-=finalisti.size();
		finalisti.clear();
		if(num_cavalli==0)
			fine=true;
		Ui.show_corsa(elenco_pedine, lunghezza_percorso);
		}while(fine!=true);
		Ui.show_classifica(classifica);
		Lavagna.updateLavagna(classifica);
	}
      
	private static boolean check_carte_partenza(Cavallo horse,int step)
	{
		int have_an_effect=0;
		int pos = horse.get_posizione();
		if(horse.have_got_card("magna_velocitas"))
           {pos+=4; have_an_effect=1;}
		else
			if(horse.have_got_card("globus_obscurus"))
				{pos=0;have_an_effect=1;}  //ma se ho globus e fortuna benevola cosa faccio?! 
					
		if(horse.have_got_card("fortuna_benevola"))
		   { pos+=(1+step); have_an_effect=1;}
		else
			if(horse.have_got_card("aqua_putrida"))
			  { pos+=step-1; have_an_effect=1;}
		if(have_an_effect==1)
		  {horse.set_posizione(pos);return true;}
		else
			return false;
	}
	
	/**
	 * Se si vuole aggiungere un effetto/carta aggiungerlo qua con la seguente logica:
	 * se si elimina con un altro metterlo nel ramo if corrispondente, altrimenti
	 * aggiungere un nuovo if 
	 * @param horse
	 * @param sprint
	 */
	private static boolean check_carte_sprint(Cavallo horse , int sprint)
	 {
		int pos = horse.get_posizione();
		int have_an_effect=0;
		if(horse.have_got_card("flagellum_fulguris"))
           {pos+=(1+sprint);have_an_effect=1;}
		else
			if(horse.have_got_card("serum_maleficum"))
			  { /*non fa lo sprint*/ 
				have_an_effect=1;
			  }
			   //se ho serum_maleficum e herba magica cosa faccio?! hanno lettera diversa
		
		if(horse.have_got_card("herba_magica"))
           { pos+=2; have_an_effect=1;} 
        else
        	if(horse.have_got_card("venenum_veneficum"))
        	   { pos+=(sprint-1); have_an_effect=1;} 
		if(have_an_effect == 1 )
		   { horse.set_posizione(pos);return true;}
		return false;
	 }
	
	private static boolean check_position_card(Cavallo horse , ArrayList <Cavallo> elenco)
	{
		int pos = horse.get_posizione();
		if(is_last_horse(horse.get_posizione(), elenco) && horse.have_got_card("vigor_ferreum"))
		{
	     horse.set_posizione(pos+=4);
	     return true;
		}
		if(is_first_horse(horse.get_posizione(), elenco) && horse.have_got_card("felix_infernalis"))
		{
	     return true; //ritorno true dicendo che ha gia' mosso anche se non ha mosso niente
		}
			
		return false;
	}
	
	/**
	 * Metodo che controlla se un cavallo e' ultimo ( anche a parimerito )
	 * Se pos e' maggiore di qualche posizione di un cavallo in gioco allora non e' ultimo
	 * altrimenti e' ultimo
	 * @param pos e' la posizione del cavallo che mi interessa
	 * @param elenco e' l'elenco di cavalli in gioco 
	 * @return
	 */
	private static boolean is_last_horse(int pos , ArrayList <Cavallo> elenco)
	{
    for (Cavallo horse : elenco)
        {
    	 if(pos>horse.get_posizione())
    		 return false;
        }
    return true;
	}
	
	private static boolean is_first_horse(int pos , ArrayList <Cavallo> elenco)
	{
		 for (Cavallo horse : elenco)
	        {
	    	 if(pos<horse.get_posizione())
	    		 return false;
	        }
	    return true;	
	}
	
	/**
	 * controlla se il giocatore ha abbastanza soldi per la min_bet altrimenti sottrae 2 pv se non ne ha lo elimina dai giocatori 
	 * XXX ANCORA TESTARE SE VA
	 * @param player giocatore da analizzare
	 * @return true se ha abbastanza soldi o false se non ne ha
	 */
	private static void check_enough_money(Giocatore player) {
		boolean togliPv;
		while (player.get_money()<player.get_min_bet()){
			 togliPv = player.sub_pv(2);
			if	(!togliPv){						//significa che il giocatore non ha abbastanza pv -> elimino
				Ui.game_over_player(player);
				elenco_giocatori.remove(player);		
			}	
		}
	}
	
	/**
	 * @author Family(degrigis) tutta mia responsabilita
	 * @param classifica
	 * @param player
	 */
	private static void make_payment_bet(ArrayList<String> classifica,Giocatore player) {
		int win_money;
		for (Scommessa scommessa : player.get_scommesse())
		{
		
			if (scommessa.get_colore()==classifica.get(0)) {
				if (scommessa.get_tipo()=="Vincente"){
					player.add_pv(3);
					win_money=Lavagna.getPosizione(classifica.get(0))*scommessa.getDenaro();
					player.set_money(player.get_money()+win_money); //punto piu alto dell'ingegneria del software mondiale
					Ui.show_win_money(player.get_nome(),win_money,3);
				}
				else {
					if (scommessa.get_tipo()=="Piazzata"){
						player.add_pv(1);
						win_money=2*scommessa.getDenaro();
						player.set_money(player.get_money()+win_money); //punto piu alto dell'ingegneria del software mondiale
						Ui.show_win_money(player.get_nome(),win_money,1);

					}
				}
			}
			else if ((scommessa.get_colore()==classifica.get(2)||scommessa.get_colore()==classifica.get(1))&&scommessa.get_tipo()=="Piazzata") {
				player.add_pv(1);
				win_money=2*scommessa.getDenaro();
				player.set_money(player.get_money()+win_money); 
				Ui.show_win_money(player.get_nome(),win_money,1);

			}
			
		}	
	}
	
	private static void make_payment_scud(ArrayList<String> classifica, Giocatore player){
		final int primo_premio=600;
		final int secondo_premio=400;
		final int terzo_premio=200;
		
		
		if(player.get_scuderia()==classifica.get(0)){
			player.set_money(player.get_money()+primo_premio);
		}
		else if(player.get_scuderia()==classifica.get(1)){
			player.set_money(player.get_money()+secondo_premio);
		}
		else if(player.get_scuderia()==classifica.get(2)){
			player.set_money(player.get_money()+terzo_premio);
		}	
	}
	private static void sort_by_pv(){
		Collections.sort(elenco_giocatori);
	}
	
	private static boolean paga_sistema(){
		
		for (Giocatore player : elenco_giocatori) {
			make_payment_bet(classifica, player);
			make_payment_scud(classifica, player);
			player.drop_card(); // butto le carte del giocatore 2
			player.drop_scommesse(); //elimino scommesse questo giro
		}
		classifica.clear(); //cancello la classifica
		elenco_pedine.clear();
		init_cavalli();
		init_segnalini();
		mMovimento.mischia();
		mAzione.mischia();
		
		turni--;
		for (Giocatore player : elenco_giocatori) {
			check_enough_money(player);
			
		}
		if (elenco_giocatori.size()==0){
			Ui.show_bad_end_message();
			return true;
		}
		if (elenco_giocatori.size()==1) {
			Ui.show_winner(elenco_giocatori.get(0).get_nome()); //sara il nome del vincitore dato che quando rimuovo compatto sempre
			return true;
		}
		if (turni==0) {
			sort_by_pv();
			Ui.show_winner(elenco_giocatori.get(0).get_nome());
			return true;
		}
		
		return false;
	}
}