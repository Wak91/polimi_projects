package it.polimi.ingegneriaDelSoftware2013.horseFever_lorenzo2.fontana_fabio1.gritti;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Scanner;



/**
 * Scheletro della classe game, questo andr poi affettato nei vari
 * moduli che comunicheranno tra loro.
 * Questo per farsi un idea di quello che ci sar da fare e per capire
 * eventuali problemi
 * 
 *
 */
public class Game {
	//Questa struttura potrebbe rivelarsi molto utile in diverse occasioni
	private static ArrayList <String> colori;
	private HashMap<Integer,Integer> map_segnalino; 	
	private static Mazzo mAzione = new Mazzo();
	private static Mazzo mPersonaggio = new Mazzo();
	private static Mazzo mScuderia = new Mazzo();
	private static Mazzo mMovimento = new Mazzo();
	
	private void set_player_name(String nome){
		Giocatore player = new Giocatore(nome);
		Elenco_giocatori.aggiungiGiocatore(player);
	}
	
	/**
	 *inizializza la hashtable da cui ricavero il numero segnalini in funzione del numero di giocatori
	 */
	public void init_hash(){
		map_segnalino=new HashMap<Integer,Integer>();
		map_segnalino.put(2,1);
		map_segnalino.put(3,2);
		map_segnalino.put(4,3);
		map_segnalino.put(5,4);
		map_segnalino.put(6,4);
		
	}
	
	public void init_colori(){
		
		colori = new ArrayList <String>();
		colori.add("nero");
		colori.add("blu");
		colori.add("verde");
		colori.add("rosso");
		colori.add("giallo");
		colori.add("bianco");
		
	}
	
	
	/**
	 * Funzione che dovra essere inserita in gioco per gestire input utente riceve un range bottom e top e controlla che l'input 
	 * sia compreso in esso message indica il messaggio che si vuole sia mostrato a schermo la prima volta
	 * ho deciso di usare interi che rendono il gioco piu immediato rispetto al digitare stringhe
	 * @param bottom  limite inferiore
	 * @param top		limite superiore
	 * @param message	messagio mostrato la prima volta
	 * @return	l'intero nel range inserito dall'utente
	 */
	private static int input_check(int bottom,int top,String message){
		boolean ok=false;
		int input=0;
		System.out.println(message);
		while (!ok){
			Scanner scanner = new Scanner(System.in);
			
			try {
				 input = Integer.parseInt(scanner.nextLine());
				if (input<bottom || input>top) {
					System.out.println("Inserisci un numero da:"+bottom+" a "+top);
				}
				else {
					ok=true;
				}
			} catch (NumberFormatException e) {
				System.out.println("Inserisci un numero");
			}
		}
		return input;
	}
	
	/**
	 * legge il numero di giocatori controllando che sia compreso tra 2 e 5 e inizializza chiedendo i nomi
	 */

	public void init_players() {
		Scanner scanner = new Scanner(System.in);
		System.out.println("Inserire numero giocatori");
		int num_giocatori=input_check(2, 5, "Si possono inserire da 2 a 5 giocatori");
		
		for (int i=0; i<num_giocatori;i++){
			System.out.println("Inserire Nome Giocatore "+(i+1)+":\n");
			String nome=scanner.nextLine();
			set_player_name(nome);
		}
		
		
	}
	
	/**
	 * legge il numero di giocatori e in funzione della hash map_segnalino inizializza numero segnalini
	 * @param num_giocatori
	 */
	public void init_segnalini(int num_giocatori){
		for (String colore : colori) {
			Segnalino_scommessa segnalino = new Segnalino_scommessa(colore,map_segnalino.get(num_giocatori),map_segnalino.get(num_giocatori));
	        Segnalini.addSegnalino(segnalino);
		}
		
	}
	
	public void init_quotazioni()
	{
		 Collections.shuffle(colori);
	        int key=5;
	        for(String s : colori)
	        {
	        Quotazione q = new Quotazione(key,s);
	        Lavagna.aggiungi_quotazione(q);
	        key--;
	        }	
	}
	
	
	public static void main (String args[])
	{	
		Game gioco= new Game();
		gioco.init_colori();
		gioco.init_players() ;
		gioco.init_hash();
		gioco.init_segnalini(13);
		gioco.init_quotazioni();
		
		//--Inizializzazione dei mazzi
		 
		Carta_azione.Extract_all_in(mAzione);
		Carta_personaggio.Extract_all_in(mPersonaggio);
		Carta_scuderia.Extract_all_in(mScuderia);
		Carta_movimento.Extract_all_in(mMovimento);
				
		//--Inizializzo riserva segnalini scommessa
		/**
		 * da qualche parte leggerï¿½ il numero di giocatori per capire
		 * quanti segnalini scommessa assegnare ad ogni scuderia
		 * adesso ipotizzo che ci siano 4 giocatori, quindi 3se per ogni colore
		 * ( serve una struttura che memorizzi in base al num di giocatori il numero
		 * di segnalini da istanziare )
		 * 
		 * Questa parte ï¿½ meglio automatizzarla con un for, magari estrando
		 * da una struttura di colori il next color da istanziare (utilizzabile tra
		 * l'altro in piï¿½ occasioni durante l'inizializzazione )
		 */
	
        
        /**
         * Ora assegno ad ogni scuderia una quotazione iniziale creando la lavagna
         * per prima cosa do una scombinata all'array_list colori creando una casualitï¿½, 
         * dopodichï¿½ inizializzo la key a 5 che rappresenta la quota piï¿½ bassa e assegno 
         * le quote in modo decrescente scorrendo la lista dei colori "shufflata" da sinistra verso destra
         */
                
        /**
         * Ora assegno ad ogni giocatore una carta personaggio
         * Le carte sono giï state mischiate all'inizio quindi posso
         * estrarre senza problemi dall'alto
         */
        for(Giocatore gg : Elenco_giocatori.getElenco())
        {
		Carta_personaggio pescata = (Carta_personaggio) mPersonaggio.pesca();
		gg.set_money(pescata.get_soldi());
		//settaggio carta scuderia in corrispondenza del personaggio pescato
		//settaggio del numero dei PV ( manca attributo in giocatore )
        }
        
        //posizione delle pedine implicitamente giï¿½ gestita nel costruttore di cavallo
        Cavallo Cnero = new Cavallo();
        Cavallo Cblu = new Cavallo();
        Cavallo Cverde = new Cavallo();
        Cavallo Crosso = new Cavallo();
        Cavallo Cgiallo = new Cavallo();
        Cavallo Cbianco = new Cavallo();
        
        //mischio la struttura elenco_giocatori in modo da dare un ordine di gioco casuale
        Elenco_giocatori.ordineCasuale();
        
        //_______________________________________________________________
        
        //  QUA IN PRATICA FINISCE LA FASE DI INIZIALIZZAZIONE DEL GIOCO
        
        //_______________________________________________________________
        
        //ora inizia la fase del gioco che si ripete ad ogni turno
        for(Giocatore gg : Elenco_giocatori.getElenco())
           {
           Carta_azione pescata = (Carta_azione)mAzione.pesca();
           gg.add_action_card(pescata);
           pescata = (Carta_azione)mAzione.pesca();
           gg.add_action_card(pescata);
           }
        
        /**
         * in giocatore probabilmente non serve l'array list di carte 
         * azione, perchï¿½ la carta personaggio viene assorbita dagli  attributi 
         *  quella scuderia potremmo utilizzare un attributo e queste due carte 
         *  sono entrambe carte azione, quindi o usiamo un mini-array o 2 attributi...
         */
        
		
        
	}
}
