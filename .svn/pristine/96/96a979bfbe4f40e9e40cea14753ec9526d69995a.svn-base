package it.polimi.ingegneriaDelSoftware2013.horseFever_lorenzo2.fontana_fabio1.gritti;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Scanner;

public class Text_interface implements User_interface {
	
	
	HashMap<Integer, String> mappa_interi_colori; //necessaria per tradurre gli interi che leggo in stringhe colori
	
	public Text_interface()
	{
	init_mappa_interi_colori();	//inizializza hash da interi a colori
	System.out.println("-------BENVENUTO IN HORSE FEVER [VERSIONE TESTUALE]----------");		
	}
	
	/**
	 * funzione che inizializza hash map che trasforma gli interi che vengono acquisiti da console in colori dei cavalli  
	 */
	private void init_mappa_interi_colori() {
		mappa_interi_colori= new HashMap<Integer, String>();
		mappa_interi_colori.put(0, "nero");
		mappa_interi_colori.put(1, "blu");
		mappa_interi_colori.put(2, "verde");
		mappa_interi_colori.put(3, "rosso");
		mappa_interi_colori.put(4, "giallo");
		mappa_interi_colori.put(5, "bianco");		
	}
	
	//Ovverride
	public ArrayList <Giocatore> get_players(){
		int num,i;
		Scanner scanner = new Scanner(System.in);
		String nome;
		Carta_personaggio card;
		ArrayList <Giocatore> tempg = new ArrayList <Giocatore>();
		System.out.println("Quanti giocatori?");
		num=input_check(2, 6, "");
	    for(i=0;i<num;i++)
	       {
	    	System.out.println("Nome del " +(i+1)+ " giocatore \n");
	    	nome = scanner.nextLine();
	    	card = (Carta_personaggio) Game.getMazzoPersonaggi().pesca();
	    	tempg.add(new Giocatore (nome,card));
	       }
	    return tempg;
	}
	
	/**
	 * Funzione per gestire input utente riceve un range bottom e top e controlla che l'input 
	 * sia compreso in esso message indica il messaggio che si vuole sia mostrato a schermo la prima volta
	 * ho deciso di usare interi che rendono il gioco piu immediato rispetto al digitare stringhe
	 * @param bottom  limite inferiore
	 * @param top		limite superiore
	 * @param message	messagio mostrato la prima volta
	 * @return	l'intero nel range inserito dall'utente
	 */
	public static int input_check(int bottom,int top,String message){
		boolean ok=false;
		int input=0;
		if (message!=""){
			System.out.println(message);
		}
		while (!ok){
			Scanner scanner = new Scanner(System.in);
			
			try {
				 input = Integer.parseInt(scanner.nextLine());
				if (input<bottom || input>top) {
					System.out.println("Inserisci un numero da:"+bottom+" a "+top);
				}
				else {
					ok=true;
				}
			} catch (NumberFormatException e) {
				System.out.println("Inserisci un numero");
			}
		}
		return input;
	}
	
	public ArrayList <Scommessa> get_scommesse() {

		//da fare
		return null;
		
	}

	
	public ArrayList <Carta_azione> get_carte_azione() {

		ArrayList <Carta_azione> ca_pescate = new ArrayList <Carta_azione>();
		Carta_azione card;
		System.out.println("Pesco 2 carte azione\n");
		card = (Carta_azione)Game.getMazzoAzione().pesca();
		ca_pescate.add(card);
		card = (Carta_azione)Game.getMazzoAzione().pesca();
		ca_pescate.add(card);
		return ca_pescate;
	}

	public void play_action_card(Giocatore player) {

		int scelta_carta,scelta_colore;
		boolean annulla=false;
		Carta_azione card;
		String color;
		do
		{
		System.out.println("Giocatore " + player.get_nome() +" che carta azione vuoi giocare?\n");
		System.out.println("\n1) " +player.get_action_cards().get(0) + "\n2) "+player.get_action_cards().get(1) );
		scelta_carta = input_check(1,2,"");
		card = player.get_action_cards().get(scelta_carta);
		System.out.println("\nSu quale cavallo?\n");
		for(String s : Game.get_colori())
		{
		int i=1;
		System.out.println(""+i+") "+s+"\n");
		}
		System.out.println("7) Annulla\n");
		scelta_colore = input_check(1,7,"");
		if(scelta_colore == 7)
			annulla=true;
		else
		{
		color = Game.get_colori().get(scelta_colore);
		//ora devo estrarre il cavallo di quel colore (scelta_colore) e settargli la carta_azione scelta (card)
		}
		}while(annulla==true); //se per caso cambio idea su quale delle mie 2 carte giocare
	}


	//@Override
	public String[] gara() {
		// TODO Auto-generated method stub
		return null;
	}
	
	
//----------------------------------------METODI INTERAZIONE SCOMMESSA---------------------------------------->
	public boolean make_seconda_scommessa(Giocatore player) {
		System.out.println(player.get_nome()+" vuoi fare una seconda scommessa?\n[0]Si\n[1]No");
		int risp = input_check(0, 1, "");
		if (risp==0)
			return true;
		else 
			return false;
		
	}
	
	private void show_interi_colori(){
		for (Integer key : mappa_interi_colori.keySet()) {
			System.out.println("["+key+"] "+mappa_interi_colori.get(key));
		}
	}
	
	public void show_action_card(Giocatore player) {
		System.out.println("Giocatore "+player.get_nome()+" hai pescato: ");
		player.show_action_cards();		
	}
	
	
	
	public String get_cavallo_scommessa(String message) {
		
		
		System.out.println("\n-------GIRO DI SCOMMESSE----------");
		if (message!=""){
			System.out.println(message);
		}
		System.out.println("Le Quotazioni attuali sono:");
		Lavagna.visualizzaLavagna();
		System.out.println("Inserisci il numero del cavallo su cui vuoi scommettere");
		show_interi_colori();
		int int_colore =input_check(0, 5, "");
		return mappa_interi_colori.get(int_colore);
	}
	
	public String get_cavallo_scommessa(){
		return get_cavallo_scommessa("");
	}
	
	public  int get_soldi_scommessa(Giocatore player) {
		boolean exit=false;
		int number_cash;	//numero banconote
		int type_cash;		//tipo banconote 50,100...
		int den=0;			//denaro scommesso
		while (!exit){	
			type_cash = Text_interface.input_check(0,4,"Ora hai:"+(player.get_money()-den)+"€"+"\nInserisci banconota da inserire:\n[0]50\n[1]100\n[2]1000\n[3]FINE\n[4]AZZERA SOLDI");
			switch (type_cash) {
			case 0:
				 number_cash=Text_interface.input_check(0, (player.get_money()-den)/50, "Inserisci quante banconote da 50 vuoi");
					 den+=number_cash*50;				
				break;
	
			case 1:
				number_cash=Text_interface.input_check(0, (player.get_money()-den)/100, "Inserisci quante banconote da 100 vuoi");
					 den+=number_cash*100;				
				break;
			case 2:
				number_cash=Text_interface.input_check(0, (player.get_money()-den)/1000, "Inserisci quante banconote da 1000 vuoi");
					den+=number_cash*1000;
					break;
			case 3:
				if(den>=player.get_min_bet())
				exit=true;
				else {
					System.out.println("Devi Scommettere almeno "+player.get_min_bet());
				}
				break;
			case 4:
				den=0;
				System.out.println("Soldi scommessa azzerati");
				break;
			}	
			
		}		
		return den;	
	}
	/**
	 * gestisce il tipo di scommessa scelto utente
	 * @return ritorna alternativamente "Vincente" o "Piazzata" a seconda della scelta
	 */
	public String get_tipo_scommessa(String message) {
		if (message!="")	
			System.out.println(message);
		int tipo = input_check(0, 1, "Inserisci tipo scommessa:\n[0]Vincente\n[1]Piazzata");
		String tipo_scommessa;
		if (tipo==0)
			tipo_scommessa="Vincente";
		else
			tipo_scommessa= "Piazzata";
		return tipo_scommessa;
	}
	
	public String get_tipo_scommessa() {
		return get_tipo_scommessa("");
	}
	
	public void show_all_bet() {
		System.out.println("\n-------SCOMMESSE EFFETTUATE----------");
		for (Giocatore player : Game.get_giocatori()) {
			player.show_scommesse();
		}		
	}
	public void game_over_player(Giocatore player){
		System.out.println("Mi dispiace "+player.get_nome()+" ma hai perso");
	}

//<------------------------------TRUCCARE CORSA---------------------------------------->
	
	/**
	 * restituisce la carta azione che il giocatore vuole giocare
	 */
	public Carta_azione get_action_card_played(Giocatore player) {
		System.out.println("\n-------TRUCCARE LA CORSA----------");
		System.out.println(player.get_nome()+" hai queste carte azione:");
		player.show_action_cards();
		String message = "Inserisci numero relativo a carta:";
		int i= 0;
		for (Carta_azione card : player.get_action_cards()) {	//mostro le carte come "[indice array] : nome" cosi sotto riesco a ricavare la carta dall'indice
			message+="\n["+i+"]"+card.getNome();				//digitato dall'utente
			i++;
		}
		System.out.println(message);
		int index = input_check(0, 1, "");
		Carta_azione card=null;
		try {
			card = player.get_card_at_index(index);
		} catch (IndexOutOfBoundsException e) {
			System.out.println("NON so perchè ma non hai pescato carte");
		}
		return card;	
		
		
			
	
	}
	/**
	 * restituisce cavallo 
	 */
	public Cavallo get_horse_affected() {
		System.out.println("Su quale cavallo vuoi giocare questa carta?");
		show_interi_colori();
		int int_colore =input_check(0, 5, "");
		String color =  mappa_interi_colori.get(int_colore);
		
		for (Cavallo horse : Game.get_cavalli()) {
			if (horse.get_color()==color){
				return horse;
			}
		}
		return null;  //non dovrebbe mai arrivare qui c'e sempre un cavallo di quel colore
	}
	public void show_affected_horse() {
		System.out.println("\n-------SITUAZIONE CAVALLI----------");
		for (Cavallo horse : Game.get_cavalli()) {
			System.out.println("Cavallo: "+horse.get_color());
			horse.show_carte_azione();
		}
		
	}

	
	public void show_corsa(ArrayList<Cavallo> cavalli_in_gioco,int lunghezza) {
		System.out.print("\n\n_________TABELLONE CORSA_________\n\n\n");
		for(Cavallo horse : cavalli_in_gioco)
		   {
			System.out.print(""+horse.get_color()+"  )\n");
			for(int i=1;i<=lunghezza-1;i++)
				System.out.print("- ");
			System.out.print("F\n");
			
			if(horse.get_posizione()<=lunghezza)
			  {
			
			   for(int i=1;i<horse.get_posizione();i++)
			       System.out.print("# ");
			   System.out.print("X ");
			   
			   for(int i=horse.get_posizione()+1;i<=lunghezza;i++)
				   System.out.print("# ");
			   System.out.print("\n");
			   for(int i=1;i<=lunghezza-1;i++)
				   System.out.print("- ");
			   System.out.print("F ");
			  }
			else
				{				   
				for(int i=1;i<=lunghezza;i++)
					System.out.print("# ");
				
			    for(int i=lunghezza+1;i<horse.get_posizione();i++)
			    	System.out.print("# ");
			    System.out.print("X");
			    }
			System.out.print("\n");
		   }
		}
	
	//<----PROVA DELLA GRAFICA TESTUALE---->
	public static void main(String args[])
	{
		Text_interface ti = new Text_interface();
		ArrayList <Cavallo> al = new ArrayList<Cavallo>();
		Cavallo c = new Cavallo("rosso  ");
		c.set_posizione(4);
		Cavallo c1 = new Cavallo("verde ");
		c1.set_posizione(16);
		Cavallo c2 = new Cavallo("giallo");
		c2.set_posizione(5);
		Cavallo c3 = new Cavallo("blu   ");
		c3.set_posizione(2);
		al.add(c);
		al.add(c1);
		al.add(c2);
		al.add(c3);
		ti.show_corsa(al,15);
	}

	
	public void show_classifica(ArrayList<String> classifica) {
		int posizione=1;
		System.out.println("<--CLASSIFICA FINALE-->\n");
		for(String s : classifica)
		   {
			
			System.out.println("" + posizione +" )" + s);
			posizione++;
		   }
		
	}
	
	}


