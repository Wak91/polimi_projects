package Network;

import it.polimi.ingegneriaDelSoftware2013.horseFever_lorenzo2.fontana_fabio1.gritti.GameOption;
import it.polimi.ingegneriaDelSoftware2013.horseFever_lorenzo2.fontana_fabio1.gritti.Main;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;

import Controller.Controller_Interface;
import Gui_Events.AnswerSecondaScommessaEvent;
import Gui_Events.HorseFeverEventGui;
import Gui_Events.TruccaCavallo;
import Gui_Events.setNomeEvent;
import Gui_Events.setNumPlayerEvent;
import Gui_Events.setScommessaEvent;

public class Server extends Thread{

	private ServerSocket Server;
	private static int num_player;
	private static int connessioni=0;
	public static ArrayList<Socket> elenco_connessioni;
	private static int current_connession=0;
	private static int  last_connection;
	private Controller_Interface game_controller;
	
	public Server(Controller_Interface game_controller) throws Exception {
		
		Server =  new ServerSocket(4560);
		this.game_controller = game_controller;
		elenco_connessioni = new ArrayList<Socket>();
		num_player=GameOption.numplayer; //un player sono io!( il server )
		//Client myClient = new Client(InetAddress.getByName("localhost"), 4560); 
		//elenco_connessioni.add(new Socket("localhost",4560)); //come primo elemento mi ci piazzo io server
		System.out.println(""+elenco_connessioni.size());
		System.out.println("Il Server e' in attesa sulla porta 4560. Aspetto "+(num_player-1)+" giocatori" );
		this.start();
	}
	public static  Socket previousConnection() {
		int old_connession= last_connection;

		if(last_connection==0)
		{last_connection=num_player-1;}
	else
	    {last_connection--;}
		return elenco_connessioni.get(old_connession);
	}
	
	public static Socket nextConnection()
	{ 
		int old_connession= current_connession;
		if(current_connession>=num_player-1)
			{current_connession=0;}
		else
		    {current_connession++;}
		return elenco_connessioni.get(old_connession);
	}
	
	
	public static ArrayList<Socket> getConnesioni()
	{
		return elenco_connessioni;
	}
	
	
	public static Socket getCurrentConnession()
	{
		return elenco_connessioni.get(current_connession);
	}
	
	public void run() {
		while (connessioni<num_player) {
			try {
				System.out.println("In attesa di Connessione.");
				Socket client = Server.accept();
				System.out.println("Connessione accettata da: "
						+ client.getInetAddress());
				elenco_connessioni.add(client);
				System.out.println(""+elenco_connessioni.size());
				connessioni++;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		Main.start_online(new setNumPlayerEvent(num_player));
		while (true) {
			
			try {
				
				System.out.println("attendo eventi dalla gui"+Server);
				Socket client2 = Server.accept(); //quando ricevo qualcosa
				System.out.println("Ho ricevuto l'evento del nome");
				InputStream sIN = client2.getInputStream(); //apro il canale
				ObjectInputStream ois = new ObjectInputStream(sIN); //per l'oggetto
				HorseFeverEventGui EventArrived = (HorseFeverEventGui)ois.readObject(); //leggo l'oggetto e faccio un cast verso un evento generico della gui
				//ora devo analizzare di che tipo di evento si tratta
				if(EventArrived.getClass() == setNomeEvent.class) // se e' un evento di tipo nome
				   { 
					setNomeEvent sNE = (setNomeEvent)EventArrived; //allora faccio il cast verso di lui
					game_controller.create_player(sNE); //e chiamola funzione di creazione giocatore sul controller del gioco!
				   }
				
				if(EventArrived.getClass() == setScommessaEvent.class) // se e' un evento di tipo nome
				   { 
					setScommessaEvent sNE = (setScommessaEvent)EventArrived; //allora faccio il cast verso di lui
					game_controller.create_bet(sNE); //e chiamola funzione di creazione giocatore sul controller del gioco!
				   }
				
				if(EventArrived.getClass() == TruccaCavallo.class) // se e' un evento di tipo nome
				   { 
					TruccaCavallo sNE = (TruccaCavallo)EventArrived; //allora faccio il cast verso di lui
					game_controller.tarocca_cavallo(sNE); //e chiamola funzione di creazione giocatore sul controller del gioco!
				   }
				else if (EventArrived.getClass() == AnswerSecondaScommessaEvent.class) {
					AnswerSecondaScommessaEvent Asb = (AnswerSecondaScommessaEvent)EventArrived;
					game_controller.ask_second_bet(Asb);
				}

					
					
					
				} 
				
				
				catch (Exception e) {
				
					e.printStackTrace();
				}
				
				
			}
	}

	public void go()
	{
		//qua aspetto la scrittura degli eventi sul socket
		
	}
}
