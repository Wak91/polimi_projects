#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\rightmargin 2.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\align center

\emph on
\noun on
POLITECNICO DI MILANO
\end_layout

\begin_layout Standard
\align center

\emph on
\noun on
SCUOLA DI INGEGNERIA DELL’INFORMAZIONE
\end_layout

\begin_layout Standard
\align center

\emph on
\noun on
CORSO DI LAUREA MAGISTRALE IN INGEGNERIA INFORMATICA
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\begin_inset Graphics
	filename img/Logo_Politecnico_Milano.png
	scale 40

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
\size giant
INTEGRAZIONE MODULO
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
\size giant
WI-FI CON
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
\size giant
STM32_DISCOVERY
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\align center

\size larger
Progetto di real time operating systems
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\align center

\size largest
Sebastiano Mariani, Fabio Gritti
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Introduzione
\end_layout

\begin_layout Standard
Lo scopo del progetto è quello di sviluppare codice che permetta l'integrazione
 tra la board STM32F4_Discovery e il modulo wi-fi NRF24L01, e successivamente
 integrare la board con altri moduli così da poter sfruttare la comunicazione
 wireless implementata.
\end_layout

\begin_layout Standard
Nello specifico:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{Podometro:}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item Permette di inviare il numero di passi rilevati dal podometro ad un
 					altra board tramite comunicazione wireless
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{Suono:} 
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item Una volta ricevuti i dati permette di capire, tramite segnale 				acustico,
 chi ha fatto più passi e chi meno tra le 2 board comunicanti.
 				Inoltre permette anche di sapere il numero di passi effettuati
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Sulla board è installato il sistema operativo miosix, il quale fornisce
 strumenti indispensabili come il bootloader e un environment di esecuzione
 per il C++.
\end_layout

\begin_layout Section
Assunzioni e Strumenti utilizzati
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{Assunzioni:}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item Entrabe le board possono sia ricevere che trasmettere, si è raggiunto
 questo obiettivo grazie all'uso di thread e la loro sincronizzazione
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item La trasmissione è stata pensata con un paylaod statico a 4 byte visto
 che l'unica dato possibile da trasmettere è il numero di passi intero
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item <<TODO - assunzioni sui metodi di integrazione>
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{Strumenti Utilizzati:} 
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item STM32F4 Discovery: board con architettura ARM a 32 bit, fornitaci da
 STMicroelectronics©
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item Software per il controllo di versione git con repository remota hostata
 sul portale Github 
\end_layout

\begin_layout Plain Layout

	
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item Modulo wifi NRF24L01P prodotto da Nordic Semiconduc- tor©
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item Sistema operativo open source per sistemi embedded Miosix sviluppato
 dall'Ing.
 Federico Terraneo
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item QSTLink2: programma sviluppato da STMicroelectronics© che permette
 di flashare eseguibili sulla board
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item Cavo seriale
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Funzionamento NRF24L01
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/Automa nRF24L01.png
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Schema di funzionamento NRF24L01
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Il codice è stato strutturato in base allo schema sovrastante:
\end_layout

\begin_layout Itemize
Passaggio da stato Power down a stato Standby I tramite funzone powerUp()
\end_layout

\begin_layout Itemize
Passaggio da Stabdby I a RX mode tramite funzione setReceiveMode()
\end_layout

\begin_layout Itemize
Passaggio da RX mode a TX mode passando da Standby I tramite funzione TrasmitDat
a() che al suo interno invoca la funzione setTransmitMode()
\end_layout

\begin_layout Itemize
Passaggio da TX Mode a RX mode affidato sempre alla funzione TrasmitData(),
 la quale quado finisce attua un opportuna manipolazione dei bit al fine
 di riportare lo stato del modulo in RX mode passando da Standby I
\end_layout

\begin_layout Standard
Inoltre il codice è stato pensato affinchè si evitasse il passaggio allo
 stato Standby II che, come riportato nel reference manual di NRF24L01,
 risulta essere uno stato indesiderato.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Descrizione Classi
\end_layout

\begin_layout Standard
Le varie classi del progetto sono state suddivise in cartelle, una per modulo,
 per rendere più comprensibile la struttura del progetto e di conseguenza
 renderla più navigabile.
\end_layout

\begin_layout Standard
la suddivisione è la seguente:
\end_layout

\begin_layout Itemize
Wifi-Module
\end_layout

\begin_layout Itemize
Pedometer
\end_layout

\begin_layout Itemize
Speaker + suoni (cartella contenente i campioni dei suoni utilizzati)
\end_layout

\begin_layout Standard
Per una spiegazione detagliata sull'implementazione delle varie funzioni
 si vedano i commenti interni al codice.
\end_layout

\begin_layout Standard
Per invece una documentazione dettagliata dei due moduli integrati si vedano
 i documenti redatti dagli altri gruppi.
\end_layout

\begin_layout Subsection
Wifi-Module
\end_layout

\begin_layout Standard
Cartella contenente tutte le classi C++ utili al funzionamento del NRF24L01
 più alcuni file utili a scopi di debugging
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{NRF24L01:}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin {itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item classe contenente le funzioni strettamente legate al setup e alle operazion
i per permettere la trasmissione dei dati wireless
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{Spi:} classe necessaria per trasmettere i dati al modulo wifi
\end_layout

\begin_layout Plain Layout

		
\backslash
begin {itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item costruttore: esegue il setup del bus spi in modalità full-duplex
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
begin {itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item send(int data): permette di inviare dati tramite bus spi
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
begin {itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item receive(): permette di ricevere dati tramite bus spi
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{exorcizo.cpp:}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin {itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item file C++ che quando eseguito compie un reset di tutti i registri della
 board.
 Molto utile in fase di debug
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{mainRX.cpp - mainTX.cpp:}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin {itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item files C++ derivanti da una prima versione del progetto in cui una board
 si occupava solamente della trasmissione e l'altra solo della ricezione.
\end_layout

\begin_layout Plain Layout

Molto utile per capire a fondo i meccanismi del modulo Wifi
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Pedometer
\end_layout

\begin_layout Standard
Modulo sviluppato dal gruppo Piscitello - Tacconelli, serve a tenere rilevare
 i passi efffettuati tramite accellerometro e algoritmo di <TODO nome cinese>>
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{Pedometer:}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin {itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item classe contenente le funzioni che permettono il setup iniziale del
 podometro e la lettura dei dati rilevati
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{lis302dl:} 
\end_layout

\begin_layout Plain Layout

		
\backslash
begin {itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item permette il setup corretto dell'accellerometro per la rivelazione dei
 movimenti sui 3 assi cartesiani
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{stats:}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin {itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item classe in grado di ricavare statistiche, come il calcolo delle calorie
 consumate, dai dati raccolti 
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Speaker
\end_layout

\begin_layout Standard
Modulo sviluppato dal gruppo Mezzanotte - Garetti - <<TODO nome altro tipo
 >>.
 Questo modulo è in grado di emettere avvisi acustici tramite il campionamento
 di appositi suoni.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{Player:}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin {itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item classe contenente le funzioni che permettono lo stream corretto dell'audio
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{slice-and-play:} 
\end_layout

\begin_layout Plain Layout

		
\backslash
begin {itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item classe che mette a disposizioni le funzioni utili all'integrazione
 del modulo
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{convert:}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin {itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item classe in grado di convertire i file campionati da formato .wav a formato
 .h
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Threads e Sincronizzazione
\end_layout

\begin_layout Standard
Per permmettere alla board di interpretare sia il ruolo di ricevitore sia
 quello di trasmettitore si è optato per una programmazione multithreading,
 in particolare si è deciso di sviluppare 2 threads:
\end_layout

\begin_layout Itemize
send_handler(void* arg): Thread che si occupa di passare in stato di trasmission
e e di trasmettere ogni secondo
\end_layout

\begin_layout Itemize
irq_handler(void* arg): Thread che si occupa della gestione delle interrupt
 di ricezione e di comunicare agli altri moduli il dato ricevuto
\end_layout

\begin_layout Subsection
Trasmissone
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Flow chart thread trasmissione
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Viene dichiarato un puntatore a carattere cosi da poter scandire byte per
 byte l'intero rappresentante il numero di passi
\end_layout

\begin_layout Enumerate
Entrata in un ciclo infinito
\end_layout

\begin_layout Enumerate
Sleep di 1 secondo (il moduro è in stato di ricezione) 
\end_layout

\begin_layout Enumerate
Mutex lock sulla variabile globale modality, in questo modo si evitano conflitti
 con il thread in ricezione
\end_layout

\begin_layout Enumerate
Retrive dei dati ricevuti dal podometro(si veda paragrafo su integrazione)
\end_layout

\begin_layout Enumerate
Trasmissioni dei dati in modo wireless
\end_layout

\begin_layout Enumerate
Ritorno a stato di ricezione (fine della funzione TransmitData() come detto
 in precedenza)
\end_layout

\begin_layout Enumerate
Mutex unlock sulla variabile globale modality
\end_layout

\begin_layout Enumerate
Ritorno al punto 3
\end_layout

\begin_layout Subsection
Ricezione
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Flow chart thread ricezione
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Entrata in un ciclo infinito
\end_layout

\begin_layout Enumerate
Entrata in un ciclo di attesa, la condizione di uscita è data dall'arrivo
 di un'interrupt di ricezione
\end_layout

\begin_layout Enumerate
Mutex lock sulla variabile globale modality, in questo modo si evitano conflitti
 con il thread in trasmissione
\end_layout

\begin_layout Enumerate
Retrive dei dati ricevuti via wireless
\end_layout

\begin_layout Enumerate
Retrive dei dati ricevuti dal podometro
\end_layout

\begin_layout Enumerate
Confronto tra i dati per integrazione con il modulo Speaker(si veda paragrafo
 su integrazione)
\end_layout

\begin_layout Enumerate
Reset dell'interrupt
\end_layout

\begin_layout Enumerate
Reset del bufffer di riceione per prevenire overflow di dati
\end_layout

\begin_layout Enumerate
Mutex unlock sulla variabile globale modality
\end_layout

\begin_layout Enumerate
Ritorno al punto 2
\end_layout

\begin_layout Section
Integrazione
\end_layout

\end_body
\end_document
